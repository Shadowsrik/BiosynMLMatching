/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.hzi.helmholtz.ThriftService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BiosynThriftService {

  public interface Iface {

    public String SimpleCompare(String jobID, String windowSize, String algorithm, String BSYNID, String modelID, String ModulesFromEditor) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void SimpleCompare(String jobID, String windowSize, String algorithm, String BSYNID, String modelID, String ModulesFromEditor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String SimpleCompare(String jobID, String windowSize, String algorithm, String BSYNID, String modelID, String ModulesFromEditor) throws org.apache.thrift.TException
    {
      send_SimpleCompare(jobID, windowSize, algorithm, BSYNID, modelID, ModulesFromEditor);
      return recv_SimpleCompare();
    }

    public void send_SimpleCompare(String jobID, String windowSize, String algorithm, String BSYNID, String modelID, String ModulesFromEditor) throws org.apache.thrift.TException
    {
      SimpleCompare_args args = new SimpleCompare_args();
      args.setJobID(jobID);
      args.setWindowSize(windowSize);
      args.setAlgorithm(algorithm);
      args.setBSYNID(BSYNID);
      args.setModelID(modelID);
      args.setModulesFromEditor(ModulesFromEditor);
      sendBase("SimpleCompare", args);
    }

    public String recv_SimpleCompare() throws org.apache.thrift.TException
    {
      SimpleCompare_result result = new SimpleCompare_result();
      receiveBase(result, "SimpleCompare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SimpleCompare failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void SimpleCompare(String jobID, String windowSize, String algorithm, String BSYNID, String modelID, String ModulesFromEditor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SimpleCompare_call method_call = new SimpleCompare_call(jobID, windowSize, algorithm, BSYNID, modelID, ModulesFromEditor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SimpleCompare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobID;
      private String windowSize;
      private String algorithm;
      private String BSYNID;
      private String modelID;
      private String ModulesFromEditor;
      public SimpleCompare_call(String jobID, String windowSize, String algorithm, String BSYNID, String modelID, String ModulesFromEditor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobID = jobID;
        this.windowSize = windowSize;
        this.algorithm = algorithm;
        this.BSYNID = BSYNID;
        this.modelID = modelID;
        this.ModulesFromEditor = ModulesFromEditor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SimpleCompare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SimpleCompare_args args = new SimpleCompare_args();
        args.setJobID(jobID);
        args.setWindowSize(windowSize);
        args.setAlgorithm(algorithm);
        args.setBSYNID(BSYNID);
        args.setModelID(modelID);
        args.setModulesFromEditor(ModulesFromEditor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SimpleCompare();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("SimpleCompare", new SimpleCompare());
      return processMap;
    }

    public static class SimpleCompare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SimpleCompare_args> {
      public SimpleCompare() {
        super("SimpleCompare");
      }

      public SimpleCompare_args getEmptyArgsInstance() {
        return new SimpleCompare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SimpleCompare_result getResult(I iface, SimpleCompare_args args) throws org.apache.thrift.TException {
        SimpleCompare_result result = new SimpleCompare_result();
        result.success = iface.SimpleCompare(args.jobID, args.windowSize, args.algorithm, args.BSYNID, args.modelID, args.ModulesFromEditor);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("SimpleCompare", new SimpleCompare());
      return processMap;
    }

    public static class SimpleCompare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SimpleCompare_args, String> {
      public SimpleCompare() {
        super("SimpleCompare");
      }

      public SimpleCompare_args getEmptyArgsInstance() {
        return new SimpleCompare_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            SimpleCompare_result result = new SimpleCompare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SimpleCompare_result result = new SimpleCompare_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SimpleCompare_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.SimpleCompare(args.jobID, args.windowSize, args.algorithm, args.BSYNID, args.modelID, args.ModulesFromEditor,resultHandler);
      }
    }

  }

  public static class SimpleCompare_args implements org.apache.thrift.TBase<SimpleCompare_args, SimpleCompare_args._Fields>, java.io.Serializable, Cloneable, Comparable<SimpleCompare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleCompare_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WINDOW_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("windowSize", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithm", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BSYNID_FIELD_DESC = new org.apache.thrift.protocol.TField("BSYNID", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelID", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField MODULES_FROM_EDITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("ModulesFromEditor", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SimpleCompare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SimpleCompare_argsTupleSchemeFactory());
    }

    public String jobID; // required
    public String windowSize; // required
    public String algorithm; // required
    public String BSYNID; // required
    public String modelID; // required
    public String ModulesFromEditor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobID"),
      WINDOW_SIZE((short)2, "windowSize"),
      ALGORITHM((short)3, "algorithm"),
      BSYNID((short)4, "BSYNID"),
      MODEL_ID((short)5, "modelID"),
      MODULES_FROM_EDITOR((short)6, "ModulesFromEditor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          case 2: // WINDOW_SIZE
            return WINDOW_SIZE;
          case 3: // ALGORITHM
            return ALGORITHM;
          case 4: // BSYNID
            return BSYNID;
          case 5: // MODEL_ID
            return MODEL_ID;
          case 6: // MODULES_FROM_EDITOR
            return MODULES_FROM_EDITOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WINDOW_SIZE, new org.apache.thrift.meta_data.FieldMetaData("windowSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("algorithm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BSYNID, new org.apache.thrift.meta_data.FieldMetaData("BSYNID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULES_FROM_EDITOR, new org.apache.thrift.meta_data.FieldMetaData("ModulesFromEditor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleCompare_args.class, metaDataMap);
    }

    public SimpleCompare_args() {
    }

    public SimpleCompare_args(
      String jobID,
      String windowSize,
      String algorithm,
      String BSYNID,
      String modelID,
      String ModulesFromEditor)
    {
      this();
      this.jobID = jobID;
      this.windowSize = windowSize;
      this.algorithm = algorithm;
      this.BSYNID = BSYNID;
      this.modelID = modelID;
      this.ModulesFromEditor = ModulesFromEditor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SimpleCompare_args(SimpleCompare_args other) {
      if (other.isSetJobID()) {
        this.jobID = other.jobID;
      }
      if (other.isSetWindowSize()) {
        this.windowSize = other.windowSize;
      }
      if (other.isSetAlgorithm()) {
        this.algorithm = other.algorithm;
      }
      if (other.isSetBSYNID()) {
        this.BSYNID = other.BSYNID;
      }
      if (other.isSetModelID()) {
        this.modelID = other.modelID;
      }
      if (other.isSetModulesFromEditor()) {
        this.ModulesFromEditor = other.ModulesFromEditor;
      }
    }

    public SimpleCompare_args deepCopy() {
      return new SimpleCompare_args(this);
    }

    @Override
    public void clear() {
      this.jobID = null;
      this.windowSize = null;
      this.algorithm = null;
      this.BSYNID = null;
      this.modelID = null;
      this.ModulesFromEditor = null;
    }

    public String getJobID() {
      return this.jobID;
    }

    public SimpleCompare_args setJobID(String jobID) {
      this.jobID = jobID;
      return this;
    }

    public void unsetJobID() {
      this.jobID = null;
    }

    /** Returns true if field jobID is set (has been assigned a value) and false otherwise */
    public boolean isSetJobID() {
      return this.jobID != null;
    }

    public void setJobIDIsSet(boolean value) {
      if (!value) {
        this.jobID = null;
      }
    }

    public String getWindowSize() {
      return this.windowSize;
    }

    public SimpleCompare_args setWindowSize(String windowSize) {
      this.windowSize = windowSize;
      return this;
    }

    public void unsetWindowSize() {
      this.windowSize = null;
    }

    /** Returns true if field windowSize is set (has been assigned a value) and false otherwise */
    public boolean isSetWindowSize() {
      return this.windowSize != null;
    }

    public void setWindowSizeIsSet(boolean value) {
      if (!value) {
        this.windowSize = null;
      }
    }

    public String getAlgorithm() {
      return this.algorithm;
    }

    public SimpleCompare_args setAlgorithm(String algorithm) {
      this.algorithm = algorithm;
      return this;
    }

    public void unsetAlgorithm() {
      this.algorithm = null;
    }

    /** Returns true if field algorithm is set (has been assigned a value) and false otherwise */
    public boolean isSetAlgorithm() {
      return this.algorithm != null;
    }

    public void setAlgorithmIsSet(boolean value) {
      if (!value) {
        this.algorithm = null;
      }
    }

    public String getBSYNID() {
      return this.BSYNID;
    }

    public SimpleCompare_args setBSYNID(String BSYNID) {
      this.BSYNID = BSYNID;
      return this;
    }

    public void unsetBSYNID() {
      this.BSYNID = null;
    }

    /** Returns true if field BSYNID is set (has been assigned a value) and false otherwise */
    public boolean isSetBSYNID() {
      return this.BSYNID != null;
    }

    public void setBSYNIDIsSet(boolean value) {
      if (!value) {
        this.BSYNID = null;
      }
    }

    public String getModelID() {
      return this.modelID;
    }

    public SimpleCompare_args setModelID(String modelID) {
      this.modelID = modelID;
      return this;
    }

    public void unsetModelID() {
      this.modelID = null;
    }

    /** Returns true if field modelID is set (has been assigned a value) and false otherwise */
    public boolean isSetModelID() {
      return this.modelID != null;
    }

    public void setModelIDIsSet(boolean value) {
      if (!value) {
        this.modelID = null;
      }
    }

    public String getModulesFromEditor() {
      return this.ModulesFromEditor;
    }

    public SimpleCompare_args setModulesFromEditor(String ModulesFromEditor) {
      this.ModulesFromEditor = ModulesFromEditor;
      return this;
    }

    public void unsetModulesFromEditor() {
      this.ModulesFromEditor = null;
    }

    /** Returns true if field ModulesFromEditor is set (has been assigned a value) and false otherwise */
    public boolean isSetModulesFromEditor() {
      return this.ModulesFromEditor != null;
    }

    public void setModulesFromEditorIsSet(boolean value) {
      if (!value) {
        this.ModulesFromEditor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobID();
        } else {
          setJobID((String)value);
        }
        break;

      case WINDOW_SIZE:
        if (value == null) {
          unsetWindowSize();
        } else {
          setWindowSize((String)value);
        }
        break;

      case ALGORITHM:
        if (value == null) {
          unsetAlgorithm();
        } else {
          setAlgorithm((String)value);
        }
        break;

      case BSYNID:
        if (value == null) {
          unsetBSYNID();
        } else {
          setBSYNID((String)value);
        }
        break;

      case MODEL_ID:
        if (value == null) {
          unsetModelID();
        } else {
          setModelID((String)value);
        }
        break;

      case MODULES_FROM_EDITOR:
        if (value == null) {
          unsetModulesFromEditor();
        } else {
          setModulesFromEditor((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobID();

      case WINDOW_SIZE:
        return getWindowSize();

      case ALGORITHM:
        return getAlgorithm();

      case BSYNID:
        return getBSYNID();

      case MODEL_ID:
        return getModelID();

      case MODULES_FROM_EDITOR:
        return getModulesFromEditor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobID();
      case WINDOW_SIZE:
        return isSetWindowSize();
      case ALGORITHM:
        return isSetAlgorithm();
      case BSYNID:
        return isSetBSYNID();
      case MODEL_ID:
        return isSetModelID();
      case MODULES_FROM_EDITOR:
        return isSetModulesFromEditor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SimpleCompare_args)
        return this.equals((SimpleCompare_args)that);
      return false;
    }

    public boolean equals(SimpleCompare_args that) {
      if (that == null)
        return false;

      boolean this_present_jobID = true && this.isSetJobID();
      boolean that_present_jobID = true && that.isSetJobID();
      if (this_present_jobID || that_present_jobID) {
        if (!(this_present_jobID && that_present_jobID))
          return false;
        if (!this.jobID.equals(that.jobID))
          return false;
      }

      boolean this_present_windowSize = true && this.isSetWindowSize();
      boolean that_present_windowSize = true && that.isSetWindowSize();
      if (this_present_windowSize || that_present_windowSize) {
        if (!(this_present_windowSize && that_present_windowSize))
          return false;
        if (!this.windowSize.equals(that.windowSize))
          return false;
      }

      boolean this_present_algorithm = true && this.isSetAlgorithm();
      boolean that_present_algorithm = true && that.isSetAlgorithm();
      if (this_present_algorithm || that_present_algorithm) {
        if (!(this_present_algorithm && that_present_algorithm))
          return false;
        if (!this.algorithm.equals(that.algorithm))
          return false;
      }

      boolean this_present_BSYNID = true && this.isSetBSYNID();
      boolean that_present_BSYNID = true && that.isSetBSYNID();
      if (this_present_BSYNID || that_present_BSYNID) {
        if (!(this_present_BSYNID && that_present_BSYNID))
          return false;
        if (!this.BSYNID.equals(that.BSYNID))
          return false;
      }

      boolean this_present_modelID = true && this.isSetModelID();
      boolean that_present_modelID = true && that.isSetModelID();
      if (this_present_modelID || that_present_modelID) {
        if (!(this_present_modelID && that_present_modelID))
          return false;
        if (!this.modelID.equals(that.modelID))
          return false;
      }

      boolean this_present_ModulesFromEditor = true && this.isSetModulesFromEditor();
      boolean that_present_ModulesFromEditor = true && that.isSetModulesFromEditor();
      if (this_present_ModulesFromEditor || that_present_ModulesFromEditor) {
        if (!(this_present_ModulesFromEditor && that_present_ModulesFromEditor))
          return false;
        if (!this.ModulesFromEditor.equals(that.ModulesFromEditor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(SimpleCompare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobID()).compareTo(other.isSetJobID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobID, other.jobID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindowSize()).compareTo(other.isSetWindowSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindowSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windowSize, other.windowSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlgorithm()).compareTo(other.isSetAlgorithm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlgorithm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithm, other.algorithm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBSYNID()).compareTo(other.isSetBSYNID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBSYNID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BSYNID, other.BSYNID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModelID()).compareTo(other.isSetModelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelID, other.modelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModulesFromEditor()).compareTo(other.isSetModulesFromEditor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModulesFromEditor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ModulesFromEditor, other.ModulesFromEditor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SimpleCompare_args(");
      boolean first = true;

      sb.append("jobID:");
      if (this.jobID == null) {
        sb.append("null");
      } else {
        sb.append(this.jobID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("windowSize:");
      if (this.windowSize == null) {
        sb.append("null");
      } else {
        sb.append(this.windowSize);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("algorithm:");
      if (this.algorithm == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("BSYNID:");
      if (this.BSYNID == null) {
        sb.append("null");
      } else {
        sb.append(this.BSYNID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelID:");
      if (this.modelID == null) {
        sb.append("null");
      } else {
        sb.append(this.modelID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ModulesFromEditor:");
      if (this.ModulesFromEditor == null) {
        sb.append("null");
      } else {
        sb.append(this.ModulesFromEditor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SimpleCompare_argsStandardSchemeFactory implements SchemeFactory {
      public SimpleCompare_argsStandardScheme getScheme() {
        return new SimpleCompare_argsStandardScheme();
      }
    }

    private static class SimpleCompare_argsStandardScheme extends StandardScheme<SimpleCompare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleCompare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobID = iprot.readString();
                struct.setJobIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINDOW_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.windowSize = iprot.readString();
                struct.setWindowSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALGORITHM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.algorithm = iprot.readString();
                struct.setAlgorithmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BSYNID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.BSYNID = iprot.readString();
                struct.setBSYNIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelID = iprot.readString();
                struct.setModelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MODULES_FROM_EDITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ModulesFromEditor = iprot.readString();
                struct.setModulesFromEditorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleCompare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobID != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobID);
          oprot.writeFieldEnd();
        }
        if (struct.windowSize != null) {
          oprot.writeFieldBegin(WINDOW_SIZE_FIELD_DESC);
          oprot.writeString(struct.windowSize);
          oprot.writeFieldEnd();
        }
        if (struct.algorithm != null) {
          oprot.writeFieldBegin(ALGORITHM_FIELD_DESC);
          oprot.writeString(struct.algorithm);
          oprot.writeFieldEnd();
        }
        if (struct.BSYNID != null) {
          oprot.writeFieldBegin(BSYNID_FIELD_DESC);
          oprot.writeString(struct.BSYNID);
          oprot.writeFieldEnd();
        }
        if (struct.modelID != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelID);
          oprot.writeFieldEnd();
        }
        if (struct.ModulesFromEditor != null) {
          oprot.writeFieldBegin(MODULES_FROM_EDITOR_FIELD_DESC);
          oprot.writeString(struct.ModulesFromEditor);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SimpleCompare_argsTupleSchemeFactory implements SchemeFactory {
      public SimpleCompare_argsTupleScheme getScheme() {
        return new SimpleCompare_argsTupleScheme();
      }
    }

    private static class SimpleCompare_argsTupleScheme extends TupleScheme<SimpleCompare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SimpleCompare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobID()) {
          optionals.set(0);
        }
        if (struct.isSetWindowSize()) {
          optionals.set(1);
        }
        if (struct.isSetAlgorithm()) {
          optionals.set(2);
        }
        if (struct.isSetBSYNID()) {
          optionals.set(3);
        }
        if (struct.isSetModelID()) {
          optionals.set(4);
        }
        if (struct.isSetModulesFromEditor()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetJobID()) {
          oprot.writeString(struct.jobID);
        }
        if (struct.isSetWindowSize()) {
          oprot.writeString(struct.windowSize);
        }
        if (struct.isSetAlgorithm()) {
          oprot.writeString(struct.algorithm);
        }
        if (struct.isSetBSYNID()) {
          oprot.writeString(struct.BSYNID);
        }
        if (struct.isSetModelID()) {
          oprot.writeString(struct.modelID);
        }
        if (struct.isSetModulesFromEditor()) {
          oprot.writeString(struct.ModulesFromEditor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SimpleCompare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.jobID = iprot.readString();
          struct.setJobIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.windowSize = iprot.readString();
          struct.setWindowSizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.algorithm = iprot.readString();
          struct.setAlgorithmIsSet(true);
        }
        if (incoming.get(3)) {
          struct.BSYNID = iprot.readString();
          struct.setBSYNIDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.modelID = iprot.readString();
          struct.setModelIDIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ModulesFromEditor = iprot.readString();
          struct.setModulesFromEditorIsSet(true);
        }
      }
    }

  }

  public static class SimpleCompare_result implements org.apache.thrift.TBase<SimpleCompare_result, SimpleCompare_result._Fields>, java.io.Serializable, Cloneable, Comparable<SimpleCompare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleCompare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SimpleCompare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SimpleCompare_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleCompare_result.class, metaDataMap);
    }

    public SimpleCompare_result() {
    }

    public SimpleCompare_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SimpleCompare_result(SimpleCompare_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public SimpleCompare_result deepCopy() {
      return new SimpleCompare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public SimpleCompare_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SimpleCompare_result)
        return this.equals((SimpleCompare_result)that);
      return false;
    }

    public boolean equals(SimpleCompare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(SimpleCompare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SimpleCompare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SimpleCompare_resultStandardSchemeFactory implements SchemeFactory {
      public SimpleCompare_resultStandardScheme getScheme() {
        return new SimpleCompare_resultStandardScheme();
      }
    }

    private static class SimpleCompare_resultStandardScheme extends StandardScheme<SimpleCompare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleCompare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleCompare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SimpleCompare_resultTupleSchemeFactory implements SchemeFactory {
      public SimpleCompare_resultTupleScheme getScheme() {
        return new SimpleCompare_resultTupleScheme();
      }
    }

    private static class SimpleCompare_resultTupleScheme extends TupleScheme<SimpleCompare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SimpleCompare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SimpleCompare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
