/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftService {

  public interface Iface {

    public String testConnection(boolean test) throws org.apache.thrift.TException;

    public List<String> bruckerTAScreening_Export(boolean headerLine, boolean withoutAnalData, boolean retentionTime, boolean pseuFormula, boolean analDetailsToName, String polarity, String analSystem, List<Integer> c_ids) throws org.apache.thrift.TException;

    public void mySQLConnect(String server, String database, String userName, String userpw) throws org.apache.thrift.TException;

    public String taSreeningXMLParser(List<String> SCRNList, String TAScore, String area, String intensity, String massDev, String mSigma) throws org.apache.thrift.TException;

    public List<String> ipc(String ionFormula, String ionCharge) throws org.apache.thrift.TException;

    public String metabolomeMiningXMLParser(List<String> METAList, String intensity, String area, String peaksNo, String retTime, boolean recalculateCharge) throws org.apache.thrift.TException;

    public void metabolomeMiningQuery(List<String> QRY_IDList) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void testConnection(boolean test, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testConnection_call> resultHandler) throws org.apache.thrift.TException;

    public void bruckerTAScreening_Export(boolean headerLine, boolean withoutAnalData, boolean retentionTime, boolean pseuFormula, boolean analDetailsToName, String polarity, String analSystem, List<Integer> c_ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.bruckerTAScreening_Export_call> resultHandler) throws org.apache.thrift.TException;

    public void mySQLConnect(String server, String database, String userName, String userpw, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mySQLConnect_call> resultHandler) throws org.apache.thrift.TException;

    public void taSreeningXMLParser(List<String> SCRNList, String TAScore, String area, String intensity, String massDev, String mSigma, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.taSreeningXMLParser_call> resultHandler) throws org.apache.thrift.TException;

    public void ipc(String ionFormula, String ionCharge, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ipc_call> resultHandler) throws org.apache.thrift.TException;

    public void metabolomeMiningXMLParser(List<String> METAList, String intensity, String area, String peaksNo, String retTime, boolean recalculateCharge, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.metabolomeMiningXMLParser_call> resultHandler) throws org.apache.thrift.TException;

    public void metabolomeMiningQuery(List<String> QRY_IDList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.metabolomeMiningQuery_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String testConnection(boolean test) throws org.apache.thrift.TException
    {
      send_testConnection(test);
      return recv_testConnection();
    }

    public void send_testConnection(boolean test) throws org.apache.thrift.TException
    {
      testConnection_args args = new testConnection_args();
      args.setTest(test);
      sendBase("testConnection", args);
    }

    public String recv_testConnection() throws org.apache.thrift.TException
    {
      testConnection_result result = new testConnection_result();
      receiveBase(result, "testConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testConnection failed: unknown result");
    }

    public List<String> bruckerTAScreening_Export(boolean headerLine, boolean withoutAnalData, boolean retentionTime, boolean pseuFormula, boolean analDetailsToName, String polarity, String analSystem, List<Integer> c_ids) throws org.apache.thrift.TException
    {
      send_bruckerTAScreening_Export(headerLine, withoutAnalData, retentionTime, pseuFormula, analDetailsToName, polarity, analSystem, c_ids);
      return recv_bruckerTAScreening_Export();
    }

    public void send_bruckerTAScreening_Export(boolean headerLine, boolean withoutAnalData, boolean retentionTime, boolean pseuFormula, boolean analDetailsToName, String polarity, String analSystem, List<Integer> c_ids) throws org.apache.thrift.TException
    {
      bruckerTAScreening_Export_args args = new bruckerTAScreening_Export_args();
      args.setHeaderLine(headerLine);
      args.setWithoutAnalData(withoutAnalData);
      args.setRetentionTime(retentionTime);
      args.setPseuFormula(pseuFormula);
      args.setAnalDetailsToName(analDetailsToName);
      args.setPolarity(polarity);
      args.setAnalSystem(analSystem);
      args.setC_ids(c_ids);
      sendBase("bruckerTAScreening_Export", args);
    }

    public List<String> recv_bruckerTAScreening_Export() throws org.apache.thrift.TException
    {
      bruckerTAScreening_Export_result result = new bruckerTAScreening_Export_result();
      receiveBase(result, "bruckerTAScreening_Export");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bruckerTAScreening_Export failed: unknown result");
    }

    public void mySQLConnect(String server, String database, String userName, String userpw) throws org.apache.thrift.TException
    {
      send_mySQLConnect(server, database, userName, userpw);
      recv_mySQLConnect();
    }

    public void send_mySQLConnect(String server, String database, String userName, String userpw) throws org.apache.thrift.TException
    {
      mySQLConnect_args args = new mySQLConnect_args();
      args.setServer(server);
      args.setDatabase(database);
      args.setUserName(userName);
      args.setUserpw(userpw);
      sendBase("mySQLConnect", args);
    }

    public void recv_mySQLConnect() throws org.apache.thrift.TException
    {
      mySQLConnect_result result = new mySQLConnect_result();
      receiveBase(result, "mySQLConnect");
      return;
    }

    public String taSreeningXMLParser(List<String> SCRNList, String TAScore, String area, String intensity, String massDev, String mSigma) throws org.apache.thrift.TException
    {
      send_taSreeningXMLParser(SCRNList, TAScore, area, intensity, massDev, mSigma);
      return recv_taSreeningXMLParser();
    }

    public void send_taSreeningXMLParser(List<String> SCRNList, String TAScore, String area, String intensity, String massDev, String mSigma) throws org.apache.thrift.TException
    {
      taSreeningXMLParser_args args = new taSreeningXMLParser_args();
      args.setSCRNList(SCRNList);
      args.setTAScore(TAScore);
      args.setArea(area);
      args.setIntensity(intensity);
      args.setMassDev(massDev);
      args.setMSigma(mSigma);
      sendBase("taSreeningXMLParser", args);
    }

    public String recv_taSreeningXMLParser() throws org.apache.thrift.TException
    {
      taSreeningXMLParser_result result = new taSreeningXMLParser_result();
      receiveBase(result, "taSreeningXMLParser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "taSreeningXMLParser failed: unknown result");
    }

    public List<String> ipc(String ionFormula, String ionCharge) throws org.apache.thrift.TException
    {
      send_ipc(ionFormula, ionCharge);
      return recv_ipc();
    }

    public void send_ipc(String ionFormula, String ionCharge) throws org.apache.thrift.TException
    {
      ipc_args args = new ipc_args();
      args.setIonFormula(ionFormula);
      args.setIonCharge(ionCharge);
      sendBase("ipc", args);
    }

    public List<String> recv_ipc() throws org.apache.thrift.TException
    {
      ipc_result result = new ipc_result();
      receiveBase(result, "ipc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ipc failed: unknown result");
    }

    public String metabolomeMiningXMLParser(List<String> METAList, String intensity, String area, String peaksNo, String retTime, boolean recalculateCharge) throws org.apache.thrift.TException
    {
      send_metabolomeMiningXMLParser(METAList, intensity, area, peaksNo, retTime, recalculateCharge);
      return recv_metabolomeMiningXMLParser();
    }

    public void send_metabolomeMiningXMLParser(List<String> METAList, String intensity, String area, String peaksNo, String retTime, boolean recalculateCharge) throws org.apache.thrift.TException
    {
      metabolomeMiningXMLParser_args args = new metabolomeMiningXMLParser_args();
      args.setMETAList(METAList);
      args.setIntensity(intensity);
      args.setArea(area);
      args.setPeaksNo(peaksNo);
      args.setRetTime(retTime);
      args.setRecalculateCharge(recalculateCharge);
      sendBase("metabolomeMiningXMLParser", args);
    }

    public String recv_metabolomeMiningXMLParser() throws org.apache.thrift.TException
    {
      metabolomeMiningXMLParser_result result = new metabolomeMiningXMLParser_result();
      receiveBase(result, "metabolomeMiningXMLParser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "metabolomeMiningXMLParser failed: unknown result");
    }

    public void metabolomeMiningQuery(List<String> QRY_IDList) throws org.apache.thrift.TException
    {
      send_metabolomeMiningQuery(QRY_IDList);
      recv_metabolomeMiningQuery();
    }

    public void send_metabolomeMiningQuery(List<String> QRY_IDList) throws org.apache.thrift.TException
    {
      metabolomeMiningQuery_args args = new metabolomeMiningQuery_args();
      args.setQRY_IDList(QRY_IDList);
      sendBase("metabolomeMiningQuery", args);
    }

    public void recv_metabolomeMiningQuery() throws org.apache.thrift.TException
    {
      metabolomeMiningQuery_result result = new metabolomeMiningQuery_result();
      receiveBase(result, "metabolomeMiningQuery");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void testConnection(boolean test, org.apache.thrift.async.AsyncMethodCallback<testConnection_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testConnection_call method_call = new testConnection_call(test, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean test;
      public testConnection_call(boolean test, org.apache.thrift.async.AsyncMethodCallback<testConnection_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.test = test;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testConnection_args args = new testConnection_args();
        args.setTest(test);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testConnection();
      }
    }

    public void bruckerTAScreening_Export(boolean headerLine, boolean withoutAnalData, boolean retentionTime, boolean pseuFormula, boolean analDetailsToName, String polarity, String analSystem, List<Integer> c_ids, org.apache.thrift.async.AsyncMethodCallback<bruckerTAScreening_Export_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bruckerTAScreening_Export_call method_call = new bruckerTAScreening_Export_call(headerLine, withoutAnalData, retentionTime, pseuFormula, analDetailsToName, polarity, analSystem, c_ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bruckerTAScreening_Export_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean headerLine;
      private boolean withoutAnalData;
      private boolean retentionTime;
      private boolean pseuFormula;
      private boolean analDetailsToName;
      private String polarity;
      private String analSystem;
      private List<Integer> c_ids;
      public bruckerTAScreening_Export_call(boolean headerLine, boolean withoutAnalData, boolean retentionTime, boolean pseuFormula, boolean analDetailsToName, String polarity, String analSystem, List<Integer> c_ids, org.apache.thrift.async.AsyncMethodCallback<bruckerTAScreening_Export_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.headerLine = headerLine;
        this.withoutAnalData = withoutAnalData;
        this.retentionTime = retentionTime;
        this.pseuFormula = pseuFormula;
        this.analDetailsToName = analDetailsToName;
        this.polarity = polarity;
        this.analSystem = analSystem;
        this.c_ids = c_ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bruckerTAScreening_Export", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bruckerTAScreening_Export_args args = new bruckerTAScreening_Export_args();
        args.setHeaderLine(headerLine);
        args.setWithoutAnalData(withoutAnalData);
        args.setRetentionTime(retentionTime);
        args.setPseuFormula(pseuFormula);
        args.setAnalDetailsToName(analDetailsToName);
        args.setPolarity(polarity);
        args.setAnalSystem(analSystem);
        args.setC_ids(c_ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bruckerTAScreening_Export();
      }
    }

    public void mySQLConnect(String server, String database, String userName, String userpw, org.apache.thrift.async.AsyncMethodCallback<mySQLConnect_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mySQLConnect_call method_call = new mySQLConnect_call(server, database, userName, userpw, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mySQLConnect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String server;
      private String database;
      private String userName;
      private String userpw;
      public mySQLConnect_call(String server, String database, String userName, String userpw, org.apache.thrift.async.AsyncMethodCallback<mySQLConnect_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server = server;
        this.database = database;
        this.userName = userName;
        this.userpw = userpw;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mySQLConnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mySQLConnect_args args = new mySQLConnect_args();
        args.setServer(server);
        args.setDatabase(database);
        args.setUserName(userName);
        args.setUserpw(userpw);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mySQLConnect();
      }
    }

    public void taSreeningXMLParser(List<String> SCRNList, String TAScore, String area, String intensity, String massDev, String mSigma, org.apache.thrift.async.AsyncMethodCallback<taSreeningXMLParser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      taSreeningXMLParser_call method_call = new taSreeningXMLParser_call(SCRNList, TAScore, area, intensity, massDev, mSigma, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class taSreeningXMLParser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> SCRNList;
      private String TAScore;
      private String area;
      private String intensity;
      private String massDev;
      private String mSigma;
      public taSreeningXMLParser_call(List<String> SCRNList, String TAScore, String area, String intensity, String massDev, String mSigma, org.apache.thrift.async.AsyncMethodCallback<taSreeningXMLParser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SCRNList = SCRNList;
        this.TAScore = TAScore;
        this.area = area;
        this.intensity = intensity;
        this.massDev = massDev;
        this.mSigma = mSigma;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("taSreeningXMLParser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        taSreeningXMLParser_args args = new taSreeningXMLParser_args();
        args.setSCRNList(SCRNList);
        args.setTAScore(TAScore);
        args.setArea(area);
        args.setIntensity(intensity);
        args.setMassDev(massDev);
        args.setMSigma(mSigma);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_taSreeningXMLParser();
      }
    }

    public void ipc(String ionFormula, String ionCharge, org.apache.thrift.async.AsyncMethodCallback<ipc_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ipc_call method_call = new ipc_call(ionFormula, ionCharge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ipc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ionFormula;
      private String ionCharge;
      public ipc_call(String ionFormula, String ionCharge, org.apache.thrift.async.AsyncMethodCallback<ipc_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ionFormula = ionFormula;
        this.ionCharge = ionCharge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ipc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ipc_args args = new ipc_args();
        args.setIonFormula(ionFormula);
        args.setIonCharge(ionCharge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ipc();
      }
    }

    public void metabolomeMiningXMLParser(List<String> METAList, String intensity, String area, String peaksNo, String retTime, boolean recalculateCharge, org.apache.thrift.async.AsyncMethodCallback<metabolomeMiningXMLParser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      metabolomeMiningXMLParser_call method_call = new metabolomeMiningXMLParser_call(METAList, intensity, area, peaksNo, retTime, recalculateCharge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class metabolomeMiningXMLParser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> METAList;
      private String intensity;
      private String area;
      private String peaksNo;
      private String retTime;
      private boolean recalculateCharge;
      public metabolomeMiningXMLParser_call(List<String> METAList, String intensity, String area, String peaksNo, String retTime, boolean recalculateCharge, org.apache.thrift.async.AsyncMethodCallback<metabolomeMiningXMLParser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.METAList = METAList;
        this.intensity = intensity;
        this.area = area;
        this.peaksNo = peaksNo;
        this.retTime = retTime;
        this.recalculateCharge = recalculateCharge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("metabolomeMiningXMLParser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        metabolomeMiningXMLParser_args args = new metabolomeMiningXMLParser_args();
        args.setMETAList(METAList);
        args.setIntensity(intensity);
        args.setArea(area);
        args.setPeaksNo(peaksNo);
        args.setRetTime(retTime);
        args.setRecalculateCharge(recalculateCharge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_metabolomeMiningXMLParser();
      }
    }

    public void metabolomeMiningQuery(List<String> QRY_IDList, org.apache.thrift.async.AsyncMethodCallback<metabolomeMiningQuery_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      metabolomeMiningQuery_call method_call = new metabolomeMiningQuery_call(QRY_IDList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class metabolomeMiningQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> QRY_IDList;
      public metabolomeMiningQuery_call(List<String> QRY_IDList, org.apache.thrift.async.AsyncMethodCallback<metabolomeMiningQuery_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.QRY_IDList = QRY_IDList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("metabolomeMiningQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        metabolomeMiningQuery_args args = new metabolomeMiningQuery_args();
        args.setQRY_IDList(QRY_IDList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_metabolomeMiningQuery();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("testConnection", new testConnection());
      processMap.put("bruckerTAScreening_Export", new bruckerTAScreening_Export());
      processMap.put("mySQLConnect", new mySQLConnect());
      processMap.put("taSreeningXMLParser", new taSreeningXMLParser());
      processMap.put("ipc", new ipc());
      processMap.put("metabolomeMiningXMLParser", new metabolomeMiningXMLParser());
      processMap.put("metabolomeMiningQuery", new metabolomeMiningQuery());
      return processMap;
    }

    public static class testConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testConnection_args> {
      public testConnection() {
        super("testConnection");
      }

      public testConnection_args getEmptyArgsInstance() {
        return new testConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public testConnection_result getResult(I iface, testConnection_args args) throws org.apache.thrift.TException {
        testConnection_result result = new testConnection_result();
        result.success = iface.testConnection(args.test);
        return result;
      }
    }

    public static class bruckerTAScreening_Export<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bruckerTAScreening_Export_args> {
      public bruckerTAScreening_Export() {
        super("bruckerTAScreening_Export");
      }

      public bruckerTAScreening_Export_args getEmptyArgsInstance() {
        return new bruckerTAScreening_Export_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bruckerTAScreening_Export_result getResult(I iface, bruckerTAScreening_Export_args args) throws org.apache.thrift.TException {
        bruckerTAScreening_Export_result result = new bruckerTAScreening_Export_result();
        result.success = iface.bruckerTAScreening_Export(args.headerLine, args.withoutAnalData, args.retentionTime, args.pseuFormula, args.analDetailsToName, args.polarity, args.analSystem, args.c_ids);
        return result;
      }
    }

    public static class mySQLConnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mySQLConnect_args> {
      public mySQLConnect() {
        super("mySQLConnect");
      }

      public mySQLConnect_args getEmptyArgsInstance() {
        return new mySQLConnect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mySQLConnect_result getResult(I iface, mySQLConnect_args args) throws org.apache.thrift.TException {
        mySQLConnect_result result = new mySQLConnect_result();
        iface.mySQLConnect(args.server, args.database, args.userName, args.userpw);
        return result;
      }
    }

    public static class taSreeningXMLParser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, taSreeningXMLParser_args> {
      public taSreeningXMLParser() {
        super("taSreeningXMLParser");
      }

      public taSreeningXMLParser_args getEmptyArgsInstance() {
        return new taSreeningXMLParser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public taSreeningXMLParser_result getResult(I iface, taSreeningXMLParser_args args) throws org.apache.thrift.TException {
        taSreeningXMLParser_result result = new taSreeningXMLParser_result();
        result.success = iface.taSreeningXMLParser(args.SCRNList, args.TAScore, args.area, args.intensity, args.massDev, args.mSigma);
        return result;
      }
    }

    public static class ipc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ipc_args> {
      public ipc() {
        super("ipc");
      }

      public ipc_args getEmptyArgsInstance() {
        return new ipc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ipc_result getResult(I iface, ipc_args args) throws org.apache.thrift.TException {
        ipc_result result = new ipc_result();
        result.success = iface.ipc(args.ionFormula, args.ionCharge);
        return result;
      }
    }

    public static class metabolomeMiningXMLParser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, metabolomeMiningXMLParser_args> {
      public metabolomeMiningXMLParser() {
        super("metabolomeMiningXMLParser");
      }

      public metabolomeMiningXMLParser_args getEmptyArgsInstance() {
        return new metabolomeMiningXMLParser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public metabolomeMiningXMLParser_result getResult(I iface, metabolomeMiningXMLParser_args args) throws org.apache.thrift.TException {
        metabolomeMiningXMLParser_result result = new metabolomeMiningXMLParser_result();
        result.success = iface.metabolomeMiningXMLParser(args.METAList, args.intensity, args.area, args.peaksNo, args.retTime, args.recalculateCharge);
        return result;
      }
    }

    public static class metabolomeMiningQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, metabolomeMiningQuery_args> {
      public metabolomeMiningQuery() {
        super("metabolomeMiningQuery");
      }

      public metabolomeMiningQuery_args getEmptyArgsInstance() {
        return new metabolomeMiningQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public metabolomeMiningQuery_result getResult(I iface, metabolomeMiningQuery_args args) throws org.apache.thrift.TException {
        metabolomeMiningQuery_result result = new metabolomeMiningQuery_result();
        iface.metabolomeMiningQuery(args.QRY_IDList);
        return result;
      }
    }

  }

  public static class testConnection_args implements org.apache.thrift.TBase<testConnection_args, testConnection_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnection_args");

    private static final org.apache.thrift.protocol.TField TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("test", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testConnection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testConnection_argsTupleSchemeFactory());
    }

    public boolean test; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEST((short)1, "test");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEST
            return TEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEST_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEST, new org.apache.thrift.meta_data.FieldMetaData("test", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnection_args.class, metaDataMap);
    }

    public testConnection_args() {
    }

    public testConnection_args(
      boolean test)
    {
      this();
      this.test = test;
      setTestIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnection_args(testConnection_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.test = other.test;
    }

    public testConnection_args deepCopy() {
      return new testConnection_args(this);
    }

    @Override
    public void clear() {
      setTestIsSet(false);
      this.test = false;
    }

    public boolean isTest() {
      return this.test;
    }

    public testConnection_args setTest(boolean test) {
      this.test = test;
      setTestIsSet(true);
      return this;
    }

    public void unsetTest() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEST_ISSET_ID);
    }

    /** Returns true if field test is set (has been assigned a value) and false otherwise */
    public boolean isSetTest() {
      return EncodingUtils.testBit(__isset_bitfield, __TEST_ISSET_ID);
    }

    public void setTestIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEST:
        if (value == null) {
          unsetTest();
        } else {
          setTest((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEST:
        return Boolean.valueOf(isTest());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEST:
        return isSetTest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnection_args)
        return this.equals((testConnection_args)that);
      return false;
    }

    public boolean equals(testConnection_args that) {
      if (that == null)
        return false;

      boolean this_present_test = true;
      boolean that_present_test = true;
      if (this_present_test || that_present_test) {
        if (!(this_present_test && that_present_test))
          return false;
        if (this.test != that.test)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testConnection_args typedOther = (testConnection_args)other;

      lastComparison = Boolean.valueOf(isSetTest()).compareTo(typedOther.isSetTest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.test, typedOther.test);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnection_args(");
      boolean first = true;

      sb.append("test:");
      sb.append(this.test);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testConnection_argsStandardSchemeFactory implements SchemeFactory {
      public testConnection_argsStandardScheme getScheme() {
        return new testConnection_argsStandardScheme();
      }
    }

    private static class testConnection_argsStandardScheme extends StandardScheme<testConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEST
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.test = iprot.readBool();
                struct.setTestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEST_FIELD_DESC);
        oprot.writeBool(struct.test);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testConnection_argsTupleSchemeFactory implements SchemeFactory {
      public testConnection_argsTupleScheme getScheme() {
        return new testConnection_argsTupleScheme();
      }
    }

    private static class testConnection_argsTupleScheme extends TupleScheme<testConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTest()) {
          oprot.writeBool(struct.test);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.test = iprot.readBool();
          struct.setTestIsSet(true);
        }
      }
    }

  }

  public static class testConnection_result implements org.apache.thrift.TBase<testConnection_result, testConnection_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testConnection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testConnection_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnection_result.class, metaDataMap);
    }

    public testConnection_result() {
    }

    public testConnection_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnection_result(testConnection_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public testConnection_result deepCopy() {
      return new testConnection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public testConnection_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnection_result)
        return this.equals((testConnection_result)that);
      return false;
    }

    public boolean equals(testConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testConnection_result typedOther = (testConnection_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testConnection_resultStandardSchemeFactory implements SchemeFactory {
      public testConnection_resultStandardScheme getScheme() {
        return new testConnection_resultStandardScheme();
      }
    }

    private static class testConnection_resultStandardScheme extends StandardScheme<testConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testConnection_resultTupleSchemeFactory implements SchemeFactory {
      public testConnection_resultTupleScheme getScheme() {
        return new testConnection_resultTupleScheme();
      }
    }

    private static class testConnection_resultTupleScheme extends TupleScheme<testConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bruckerTAScreening_Export_args implements org.apache.thrift.TBase<bruckerTAScreening_Export_args, bruckerTAScreening_Export_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bruckerTAScreening_Export_args");

    private static final org.apache.thrift.protocol.TField HEADER_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("headerLine", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField WITHOUT_ANAL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("withoutAnalData", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField RETENTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("retentionTime", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField PSEU_FORMULA_FIELD_DESC = new org.apache.thrift.protocol.TField("pseuFormula", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField ANAL_DETAILS_TO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("analDetailsToName", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField POLARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("polarity", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ANAL_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("analSystem", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField C_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("c_ids", org.apache.thrift.protocol.TType.LIST, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bruckerTAScreening_Export_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bruckerTAScreening_Export_argsTupleSchemeFactory());
    }

    public boolean headerLine; // required
    public boolean withoutAnalData; // required
    public boolean retentionTime; // required
    public boolean pseuFormula; // required
    public boolean analDetailsToName; // required
    public String polarity; // required
    public String analSystem; // required
    public List<Integer> c_ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER_LINE((short)1, "headerLine"),
      WITHOUT_ANAL_DATA((short)2, "withoutAnalData"),
      RETENTION_TIME((short)3, "retentionTime"),
      PSEU_FORMULA((short)4, "pseuFormula"),
      ANAL_DETAILS_TO_NAME((short)5, "analDetailsToName"),
      POLARITY((short)6, "polarity"),
      ANAL_SYSTEM((short)7, "analSystem"),
      C_IDS((short)8, "c_ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER_LINE
            return HEADER_LINE;
          case 2: // WITHOUT_ANAL_DATA
            return WITHOUT_ANAL_DATA;
          case 3: // RETENTION_TIME
            return RETENTION_TIME;
          case 4: // PSEU_FORMULA
            return PSEU_FORMULA;
          case 5: // ANAL_DETAILS_TO_NAME
            return ANAL_DETAILS_TO_NAME;
          case 6: // POLARITY
            return POLARITY;
          case 7: // ANAL_SYSTEM
            return ANAL_SYSTEM;
          case 8: // C_IDS
            return C_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HEADERLINE_ISSET_ID = 0;
    private static final int __WITHOUTANALDATA_ISSET_ID = 1;
    private static final int __RETENTIONTIME_ISSET_ID = 2;
    private static final int __PSEUFORMULA_ISSET_ID = 3;
    private static final int __ANALDETAILSTONAME_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER_LINE, new org.apache.thrift.meta_data.FieldMetaData("headerLine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.WITHOUT_ANAL_DATA, new org.apache.thrift.meta_data.FieldMetaData("withoutAnalData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.RETENTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("retentionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PSEU_FORMULA, new org.apache.thrift.meta_data.FieldMetaData("pseuFormula", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ANAL_DETAILS_TO_NAME, new org.apache.thrift.meta_data.FieldMetaData("analDetailsToName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.POLARITY, new org.apache.thrift.meta_data.FieldMetaData("polarity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ANAL_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("analSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_IDS, new org.apache.thrift.meta_data.FieldMetaData("c_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bruckerTAScreening_Export_args.class, metaDataMap);
    }

    public bruckerTAScreening_Export_args() {
    }

    public bruckerTAScreening_Export_args(
      boolean headerLine,
      boolean withoutAnalData,
      boolean retentionTime,
      boolean pseuFormula,
      boolean analDetailsToName,
      String polarity,
      String analSystem,
      List<Integer> c_ids)
    {
      this();
      this.headerLine = headerLine;
      setHeaderLineIsSet(true);
      this.withoutAnalData = withoutAnalData;
      setWithoutAnalDataIsSet(true);
      this.retentionTime = retentionTime;
      setRetentionTimeIsSet(true);
      this.pseuFormula = pseuFormula;
      setPseuFormulaIsSet(true);
      this.analDetailsToName = analDetailsToName;
      setAnalDetailsToNameIsSet(true);
      this.polarity = polarity;
      this.analSystem = analSystem;
      this.c_ids = c_ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bruckerTAScreening_Export_args(bruckerTAScreening_Export_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.headerLine = other.headerLine;
      this.withoutAnalData = other.withoutAnalData;
      this.retentionTime = other.retentionTime;
      this.pseuFormula = other.pseuFormula;
      this.analDetailsToName = other.analDetailsToName;
      if (other.isSetPolarity()) {
        this.polarity = other.polarity;
      }
      if (other.isSetAnalSystem()) {
        this.analSystem = other.analSystem;
      }
      if (other.isSetC_ids()) {
        List<Integer> __this__c_ids = new ArrayList<Integer>();
        for (Integer other_element : other.c_ids) {
          __this__c_ids.add(other_element);
        }
        this.c_ids = __this__c_ids;
      }
    }

    public bruckerTAScreening_Export_args deepCopy() {
      return new bruckerTAScreening_Export_args(this);
    }

    @Override
    public void clear() {
      setHeaderLineIsSet(false);
      this.headerLine = false;
      setWithoutAnalDataIsSet(false);
      this.withoutAnalData = false;
      setRetentionTimeIsSet(false);
      this.retentionTime = false;
      setPseuFormulaIsSet(false);
      this.pseuFormula = false;
      setAnalDetailsToNameIsSet(false);
      this.analDetailsToName = false;
      this.polarity = null;
      this.analSystem = null;
      this.c_ids = null;
    }

    public boolean isHeaderLine() {
      return this.headerLine;
    }

    public bruckerTAScreening_Export_args setHeaderLine(boolean headerLine) {
      this.headerLine = headerLine;
      setHeaderLineIsSet(true);
      return this;
    }

    public void unsetHeaderLine() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEADERLINE_ISSET_ID);
    }

    /** Returns true if field headerLine is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderLine() {
      return EncodingUtils.testBit(__isset_bitfield, __HEADERLINE_ISSET_ID);
    }

    public void setHeaderLineIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEADERLINE_ISSET_ID, value);
    }

    public boolean isWithoutAnalData() {
      return this.withoutAnalData;
    }

    public bruckerTAScreening_Export_args setWithoutAnalData(boolean withoutAnalData) {
      this.withoutAnalData = withoutAnalData;
      setWithoutAnalDataIsSet(true);
      return this;
    }

    public void unsetWithoutAnalData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHOUTANALDATA_ISSET_ID);
    }

    /** Returns true if field withoutAnalData is set (has been assigned a value) and false otherwise */
    public boolean isSetWithoutAnalData() {
      return EncodingUtils.testBit(__isset_bitfield, __WITHOUTANALDATA_ISSET_ID);
    }

    public void setWithoutAnalDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHOUTANALDATA_ISSET_ID, value);
    }

    public boolean isRetentionTime() {
      return this.retentionTime;
    }

    public bruckerTAScreening_Export_args setRetentionTime(boolean retentionTime) {
      this.retentionTime = retentionTime;
      setRetentionTimeIsSet(true);
      return this;
    }

    public void unsetRetentionTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETENTIONTIME_ISSET_ID);
    }

    /** Returns true if field retentionTime is set (has been assigned a value) and false otherwise */
    public boolean isSetRetentionTime() {
      return EncodingUtils.testBit(__isset_bitfield, __RETENTIONTIME_ISSET_ID);
    }

    public void setRetentionTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETENTIONTIME_ISSET_ID, value);
    }

    public boolean isPseuFormula() {
      return this.pseuFormula;
    }

    public bruckerTAScreening_Export_args setPseuFormula(boolean pseuFormula) {
      this.pseuFormula = pseuFormula;
      setPseuFormulaIsSet(true);
      return this;
    }

    public void unsetPseuFormula() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PSEUFORMULA_ISSET_ID);
    }

    /** Returns true if field pseuFormula is set (has been assigned a value) and false otherwise */
    public boolean isSetPseuFormula() {
      return EncodingUtils.testBit(__isset_bitfield, __PSEUFORMULA_ISSET_ID);
    }

    public void setPseuFormulaIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PSEUFORMULA_ISSET_ID, value);
    }

    public boolean isAnalDetailsToName() {
      return this.analDetailsToName;
    }

    public bruckerTAScreening_Export_args setAnalDetailsToName(boolean analDetailsToName) {
      this.analDetailsToName = analDetailsToName;
      setAnalDetailsToNameIsSet(true);
      return this;
    }

    public void unsetAnalDetailsToName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANALDETAILSTONAME_ISSET_ID);
    }

    /** Returns true if field analDetailsToName is set (has been assigned a value) and false otherwise */
    public boolean isSetAnalDetailsToName() {
      return EncodingUtils.testBit(__isset_bitfield, __ANALDETAILSTONAME_ISSET_ID);
    }

    public void setAnalDetailsToNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANALDETAILSTONAME_ISSET_ID, value);
    }

    public String getPolarity() {
      return this.polarity;
    }

    public bruckerTAScreening_Export_args setPolarity(String polarity) {
      this.polarity = polarity;
      return this;
    }

    public void unsetPolarity() {
      this.polarity = null;
    }

    /** Returns true if field polarity is set (has been assigned a value) and false otherwise */
    public boolean isSetPolarity() {
      return this.polarity != null;
    }

    public void setPolarityIsSet(boolean value) {
      if (!value) {
        this.polarity = null;
      }
    }

    public String getAnalSystem() {
      return this.analSystem;
    }

    public bruckerTAScreening_Export_args setAnalSystem(String analSystem) {
      this.analSystem = analSystem;
      return this;
    }

    public void unsetAnalSystem() {
      this.analSystem = null;
    }

    /** Returns true if field analSystem is set (has been assigned a value) and false otherwise */
    public boolean isSetAnalSystem() {
      return this.analSystem != null;
    }

    public void setAnalSystemIsSet(boolean value) {
      if (!value) {
        this.analSystem = null;
      }
    }

    public int getC_idsSize() {
      return (this.c_ids == null) ? 0 : this.c_ids.size();
    }

    public java.util.Iterator<Integer> getC_idsIterator() {
      return (this.c_ids == null) ? null : this.c_ids.iterator();
    }

    public void addToC_ids(int elem) {
      if (this.c_ids == null) {
        this.c_ids = new ArrayList<Integer>();
      }
      this.c_ids.add(elem);
    }

    public List<Integer> getC_ids() {
      return this.c_ids;
    }

    public bruckerTAScreening_Export_args setC_ids(List<Integer> c_ids) {
      this.c_ids = c_ids;
      return this;
    }

    public void unsetC_ids() {
      this.c_ids = null;
    }

    /** Returns true if field c_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetC_ids() {
      return this.c_ids != null;
    }

    public void setC_idsIsSet(boolean value) {
      if (!value) {
        this.c_ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEADER_LINE:
        if (value == null) {
          unsetHeaderLine();
        } else {
          setHeaderLine((Boolean)value);
        }
        break;

      case WITHOUT_ANAL_DATA:
        if (value == null) {
          unsetWithoutAnalData();
        } else {
          setWithoutAnalData((Boolean)value);
        }
        break;

      case RETENTION_TIME:
        if (value == null) {
          unsetRetentionTime();
        } else {
          setRetentionTime((Boolean)value);
        }
        break;

      case PSEU_FORMULA:
        if (value == null) {
          unsetPseuFormula();
        } else {
          setPseuFormula((Boolean)value);
        }
        break;

      case ANAL_DETAILS_TO_NAME:
        if (value == null) {
          unsetAnalDetailsToName();
        } else {
          setAnalDetailsToName((Boolean)value);
        }
        break;

      case POLARITY:
        if (value == null) {
          unsetPolarity();
        } else {
          setPolarity((String)value);
        }
        break;

      case ANAL_SYSTEM:
        if (value == null) {
          unsetAnalSystem();
        } else {
          setAnalSystem((String)value);
        }
        break;

      case C_IDS:
        if (value == null) {
          unsetC_ids();
        } else {
          setC_ids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER_LINE:
        return Boolean.valueOf(isHeaderLine());

      case WITHOUT_ANAL_DATA:
        return Boolean.valueOf(isWithoutAnalData());

      case RETENTION_TIME:
        return Boolean.valueOf(isRetentionTime());

      case PSEU_FORMULA:
        return Boolean.valueOf(isPseuFormula());

      case ANAL_DETAILS_TO_NAME:
        return Boolean.valueOf(isAnalDetailsToName());

      case POLARITY:
        return getPolarity();

      case ANAL_SYSTEM:
        return getAnalSystem();

      case C_IDS:
        return getC_ids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEADER_LINE:
        return isSetHeaderLine();
      case WITHOUT_ANAL_DATA:
        return isSetWithoutAnalData();
      case RETENTION_TIME:
        return isSetRetentionTime();
      case PSEU_FORMULA:
        return isSetPseuFormula();
      case ANAL_DETAILS_TO_NAME:
        return isSetAnalDetailsToName();
      case POLARITY:
        return isSetPolarity();
      case ANAL_SYSTEM:
        return isSetAnalSystem();
      case C_IDS:
        return isSetC_ids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bruckerTAScreening_Export_args)
        return this.equals((bruckerTAScreening_Export_args)that);
      return false;
    }

    public boolean equals(bruckerTAScreening_Export_args that) {
      if (that == null)
        return false;

      boolean this_present_headerLine = true;
      boolean that_present_headerLine = true;
      if (this_present_headerLine || that_present_headerLine) {
        if (!(this_present_headerLine && that_present_headerLine))
          return false;
        if (this.headerLine != that.headerLine)
          return false;
      }

      boolean this_present_withoutAnalData = true;
      boolean that_present_withoutAnalData = true;
      if (this_present_withoutAnalData || that_present_withoutAnalData) {
        if (!(this_present_withoutAnalData && that_present_withoutAnalData))
          return false;
        if (this.withoutAnalData != that.withoutAnalData)
          return false;
      }

      boolean this_present_retentionTime = true;
      boolean that_present_retentionTime = true;
      if (this_present_retentionTime || that_present_retentionTime) {
        if (!(this_present_retentionTime && that_present_retentionTime))
          return false;
        if (this.retentionTime != that.retentionTime)
          return false;
      }

      boolean this_present_pseuFormula = true;
      boolean that_present_pseuFormula = true;
      if (this_present_pseuFormula || that_present_pseuFormula) {
        if (!(this_present_pseuFormula && that_present_pseuFormula))
          return false;
        if (this.pseuFormula != that.pseuFormula)
          return false;
      }

      boolean this_present_analDetailsToName = true;
      boolean that_present_analDetailsToName = true;
      if (this_present_analDetailsToName || that_present_analDetailsToName) {
        if (!(this_present_analDetailsToName && that_present_analDetailsToName))
          return false;
        if (this.analDetailsToName != that.analDetailsToName)
          return false;
      }

      boolean this_present_polarity = true && this.isSetPolarity();
      boolean that_present_polarity = true && that.isSetPolarity();
      if (this_present_polarity || that_present_polarity) {
        if (!(this_present_polarity && that_present_polarity))
          return false;
        if (!this.polarity.equals(that.polarity))
          return false;
      }

      boolean this_present_analSystem = true && this.isSetAnalSystem();
      boolean that_present_analSystem = true && that.isSetAnalSystem();
      if (this_present_analSystem || that_present_analSystem) {
        if (!(this_present_analSystem && that_present_analSystem))
          return false;
        if (!this.analSystem.equals(that.analSystem))
          return false;
      }

      boolean this_present_c_ids = true && this.isSetC_ids();
      boolean that_present_c_ids = true && that.isSetC_ids();
      if (this_present_c_ids || that_present_c_ids) {
        if (!(this_present_c_ids && that_present_c_ids))
          return false;
        if (!this.c_ids.equals(that.c_ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bruckerTAScreening_Export_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bruckerTAScreening_Export_args typedOther = (bruckerTAScreening_Export_args)other;

      lastComparison = Boolean.valueOf(isSetHeaderLine()).compareTo(typedOther.isSetHeaderLine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderLine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerLine, typedOther.headerLine);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithoutAnalData()).compareTo(typedOther.isSetWithoutAnalData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithoutAnalData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withoutAnalData, typedOther.withoutAnalData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRetentionTime()).compareTo(typedOther.isSetRetentionTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetentionTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retentionTime, typedOther.retentionTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPseuFormula()).compareTo(typedOther.isSetPseuFormula());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPseuFormula()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pseuFormula, typedOther.pseuFormula);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnalDetailsToName()).compareTo(typedOther.isSetAnalDetailsToName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnalDetailsToName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analDetailsToName, typedOther.analDetailsToName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPolarity()).compareTo(typedOther.isSetPolarity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPolarity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.polarity, typedOther.polarity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnalSystem()).compareTo(typedOther.isSetAnalSystem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnalSystem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analSystem, typedOther.analSystem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_ids()).compareTo(typedOther.isSetC_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_ids, typedOther.c_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bruckerTAScreening_Export_args(");
      boolean first = true;

      sb.append("headerLine:");
      sb.append(this.headerLine);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withoutAnalData:");
      sb.append(this.withoutAnalData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("retentionTime:");
      sb.append(this.retentionTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pseuFormula:");
      sb.append(this.pseuFormula);
      first = false;
      if (!first) sb.append(", ");
      sb.append("analDetailsToName:");
      sb.append(this.analDetailsToName);
      first = false;
      if (!first) sb.append(", ");
      sb.append("polarity:");
      if (this.polarity == null) {
        sb.append("null");
      } else {
        sb.append(this.polarity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("analSystem:");
      if (this.analSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.analSystem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_ids:");
      if (this.c_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.c_ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bruckerTAScreening_Export_argsStandardSchemeFactory implements SchemeFactory {
      public bruckerTAScreening_Export_argsStandardScheme getScheme() {
        return new bruckerTAScreening_Export_argsStandardScheme();
      }
    }

    private static class bruckerTAScreening_Export_argsStandardScheme extends StandardScheme<bruckerTAScreening_Export_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bruckerTAScreening_Export_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER_LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.headerLine = iprot.readBool();
                struct.setHeaderLineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WITHOUT_ANAL_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.withoutAnalData = iprot.readBool();
                struct.setWithoutAnalDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RETENTION_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.retentionTime = iprot.readBool();
                struct.setRetentionTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PSEU_FORMULA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.pseuFormula = iprot.readBool();
                struct.setPseuFormulaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ANAL_DETAILS_TO_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.analDetailsToName = iprot.readBool();
                struct.setAnalDetailsToNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // POLARITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.polarity = iprot.readString();
                struct.setPolarityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ANAL_SYSTEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.analSystem = iprot.readString();
                struct.setAnalSystemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // C_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.c_ids = new ArrayList<Integer>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    int _elem2; // required
                    _elem2 = iprot.readI32();
                    struct.c_ids.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setC_idsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bruckerTAScreening_Export_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HEADER_LINE_FIELD_DESC);
        oprot.writeBool(struct.headerLine);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WITHOUT_ANAL_DATA_FIELD_DESC);
        oprot.writeBool(struct.withoutAnalData);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RETENTION_TIME_FIELD_DESC);
        oprot.writeBool(struct.retentionTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PSEU_FORMULA_FIELD_DESC);
        oprot.writeBool(struct.pseuFormula);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ANAL_DETAILS_TO_NAME_FIELD_DESC);
        oprot.writeBool(struct.analDetailsToName);
        oprot.writeFieldEnd();
        if (struct.polarity != null) {
          oprot.writeFieldBegin(POLARITY_FIELD_DESC);
          oprot.writeString(struct.polarity);
          oprot.writeFieldEnd();
        }
        if (struct.analSystem != null) {
          oprot.writeFieldBegin(ANAL_SYSTEM_FIELD_DESC);
          oprot.writeString(struct.analSystem);
          oprot.writeFieldEnd();
        }
        if (struct.c_ids != null) {
          oprot.writeFieldBegin(C_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.c_ids.size()));
            for (int _iter3 : struct.c_ids)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bruckerTAScreening_Export_argsTupleSchemeFactory implements SchemeFactory {
      public bruckerTAScreening_Export_argsTupleScheme getScheme() {
        return new bruckerTAScreening_Export_argsTupleScheme();
      }
    }

    private static class bruckerTAScreening_Export_argsTupleScheme extends TupleScheme<bruckerTAScreening_Export_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bruckerTAScreening_Export_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHeaderLine()) {
          optionals.set(0);
        }
        if (struct.isSetWithoutAnalData()) {
          optionals.set(1);
        }
        if (struct.isSetRetentionTime()) {
          optionals.set(2);
        }
        if (struct.isSetPseuFormula()) {
          optionals.set(3);
        }
        if (struct.isSetAnalDetailsToName()) {
          optionals.set(4);
        }
        if (struct.isSetPolarity()) {
          optionals.set(5);
        }
        if (struct.isSetAnalSystem()) {
          optionals.set(6);
        }
        if (struct.isSetC_ids()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetHeaderLine()) {
          oprot.writeBool(struct.headerLine);
        }
        if (struct.isSetWithoutAnalData()) {
          oprot.writeBool(struct.withoutAnalData);
        }
        if (struct.isSetRetentionTime()) {
          oprot.writeBool(struct.retentionTime);
        }
        if (struct.isSetPseuFormula()) {
          oprot.writeBool(struct.pseuFormula);
        }
        if (struct.isSetAnalDetailsToName()) {
          oprot.writeBool(struct.analDetailsToName);
        }
        if (struct.isSetPolarity()) {
          oprot.writeString(struct.polarity);
        }
        if (struct.isSetAnalSystem()) {
          oprot.writeString(struct.analSystem);
        }
        if (struct.isSetC_ids()) {
          {
            oprot.writeI32(struct.c_ids.size());
            for (int _iter4 : struct.c_ids)
            {
              oprot.writeI32(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bruckerTAScreening_Export_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.headerLine = iprot.readBool();
          struct.setHeaderLineIsSet(true);
        }
        if (incoming.get(1)) {
          struct.withoutAnalData = iprot.readBool();
          struct.setWithoutAnalDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.retentionTime = iprot.readBool();
          struct.setRetentionTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pseuFormula = iprot.readBool();
          struct.setPseuFormulaIsSet(true);
        }
        if (incoming.get(4)) {
          struct.analDetailsToName = iprot.readBool();
          struct.setAnalDetailsToNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.polarity = iprot.readString();
          struct.setPolarityIsSet(true);
        }
        if (incoming.get(6)) {
          struct.analSystem = iprot.readString();
          struct.setAnalSystemIsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.c_ids = new ArrayList<Integer>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              int _elem7; // required
              _elem7 = iprot.readI32();
              struct.c_ids.add(_elem7);
            }
          }
          struct.setC_idsIsSet(true);
        }
      }
    }

  }

  public static class bruckerTAScreening_Export_result implements org.apache.thrift.TBase<bruckerTAScreening_Export_result, bruckerTAScreening_Export_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bruckerTAScreening_Export_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bruckerTAScreening_Export_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bruckerTAScreening_Export_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bruckerTAScreening_Export_result.class, metaDataMap);
    }

    public bruckerTAScreening_Export_result() {
    }

    public bruckerTAScreening_Export_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bruckerTAScreening_Export_result(bruckerTAScreening_Export_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public bruckerTAScreening_Export_result deepCopy() {
      return new bruckerTAScreening_Export_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public bruckerTAScreening_Export_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bruckerTAScreening_Export_result)
        return this.equals((bruckerTAScreening_Export_result)that);
      return false;
    }

    public boolean equals(bruckerTAScreening_Export_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bruckerTAScreening_Export_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bruckerTAScreening_Export_result typedOther = (bruckerTAScreening_Export_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bruckerTAScreening_Export_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bruckerTAScreening_Export_resultStandardSchemeFactory implements SchemeFactory {
      public bruckerTAScreening_Export_resultStandardScheme getScheme() {
        return new bruckerTAScreening_Export_resultStandardScheme();
      }
    }

    private static class bruckerTAScreening_Export_resultStandardScheme extends StandardScheme<bruckerTAScreening_Export_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bruckerTAScreening_Export_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bruckerTAScreening_Export_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bruckerTAScreening_Export_resultTupleSchemeFactory implements SchemeFactory {
      public bruckerTAScreening_Export_resultTupleScheme getScheme() {
        return new bruckerTAScreening_Export_resultTupleScheme();
      }
    }

    private static class bruckerTAScreening_Export_resultTupleScheme extends TupleScheme<bruckerTAScreening_Export_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bruckerTAScreening_Export_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bruckerTAScreening_Export_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class mySQLConnect_args implements org.apache.thrift.TBase<mySQLConnect_args, mySQLConnect_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mySQLConnect_args");

    private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USERPW_FIELD_DESC = new org.apache.thrift.protocol.TField("userpw", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mySQLConnect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mySQLConnect_argsTupleSchemeFactory());
    }

    public String server; // required
    public String database; // required
    public String userName; // required
    public String userpw; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER((short)1, "server"),
      DATABASE((short)2, "database"),
      USER_NAME((short)3, "userName"),
      USERPW((short)4, "userpw");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER
            return SERVER;
          case 2: // DATABASE
            return DATABASE;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // USERPW
            return USERPW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERPW, new org.apache.thrift.meta_data.FieldMetaData("userpw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mySQLConnect_args.class, metaDataMap);
    }

    public mySQLConnect_args() {
    }

    public mySQLConnect_args(
      String server,
      String database,
      String userName,
      String userpw)
    {
      this();
      this.server = server;
      this.database = database;
      this.userName = userName;
      this.userpw = userpw;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mySQLConnect_args(mySQLConnect_args other) {
      if (other.isSetServer()) {
        this.server = other.server;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetUserpw()) {
        this.userpw = other.userpw;
      }
    }

    public mySQLConnect_args deepCopy() {
      return new mySQLConnect_args(this);
    }

    @Override
    public void clear() {
      this.server = null;
      this.database = null;
      this.userName = null;
      this.userpw = null;
    }

    public String getServer() {
      return this.server;
    }

    public mySQLConnect_args setServer(String server) {
      this.server = server;
      return this;
    }

    public void unsetServer() {
      this.server = null;
    }

    /** Returns true if field server is set (has been assigned a value) and false otherwise */
    public boolean isSetServer() {
      return this.server != null;
    }

    public void setServerIsSet(boolean value) {
      if (!value) {
        this.server = null;
      }
    }

    public String getDatabase() {
      return this.database;
    }

    public mySQLConnect_args setDatabase(String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public String getUserName() {
      return this.userName;
    }

    public mySQLConnect_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getUserpw() {
      return this.userpw;
    }

    public mySQLConnect_args setUserpw(String userpw) {
      this.userpw = userpw;
      return this;
    }

    public void unsetUserpw() {
      this.userpw = null;
    }

    /** Returns true if field userpw is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpw() {
      return this.userpw != null;
    }

    public void setUserpwIsSet(boolean value) {
      if (!value) {
        this.userpw = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER:
        if (value == null) {
          unsetServer();
        } else {
          setServer((String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case USERPW:
        if (value == null) {
          unsetUserpw();
        } else {
          setUserpw((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER:
        return getServer();

      case DATABASE:
        return getDatabase();

      case USER_NAME:
        return getUserName();

      case USERPW:
        return getUserpw();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER:
        return isSetServer();
      case DATABASE:
        return isSetDatabase();
      case USER_NAME:
        return isSetUserName();
      case USERPW:
        return isSetUserpw();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mySQLConnect_args)
        return this.equals((mySQLConnect_args)that);
      return false;
    }

    public boolean equals(mySQLConnect_args that) {
      if (that == null)
        return false;

      boolean this_present_server = true && this.isSetServer();
      boolean that_present_server = true && that.isSetServer();
      if (this_present_server || that_present_server) {
        if (!(this_present_server && that_present_server))
          return false;
        if (!this.server.equals(that.server))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_userpw = true && this.isSetUserpw();
      boolean that_present_userpw = true && that.isSetUserpw();
      if (this_present_userpw || that_present_userpw) {
        if (!(this_present_userpw && that_present_userpw))
          return false;
        if (!this.userpw.equals(that.userpw))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mySQLConnect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mySQLConnect_args typedOther = (mySQLConnect_args)other;

      lastComparison = Boolean.valueOf(isSetServer()).compareTo(typedOther.isSetServer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, typedOther.server);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(typedOther.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, typedOther.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserpw()).compareTo(typedOther.isSetUserpw());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpw()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpw, typedOther.userpw);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mySQLConnect_args(");
      boolean first = true;

      sb.append("server:");
      if (this.server == null) {
        sb.append("null");
      } else {
        sb.append(this.server);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userpw:");
      if (this.userpw == null) {
        sb.append("null");
      } else {
        sb.append(this.userpw);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mySQLConnect_argsStandardSchemeFactory implements SchemeFactory {
      public mySQLConnect_argsStandardScheme getScheme() {
        return new mySQLConnect_argsStandardScheme();
      }
    }

    private static class mySQLConnect_argsStandardScheme extends StandardScheme<mySQLConnect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mySQLConnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.server = iprot.readString();
                struct.setServerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USERPW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userpw = iprot.readString();
                struct.setUserpwIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mySQLConnect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.server != null) {
          oprot.writeFieldBegin(SERVER_FIELD_DESC);
          oprot.writeString(struct.server);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.userpw != null) {
          oprot.writeFieldBegin(USERPW_FIELD_DESC);
          oprot.writeString(struct.userpw);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mySQLConnect_argsTupleSchemeFactory implements SchemeFactory {
      public mySQLConnect_argsTupleScheme getScheme() {
        return new mySQLConnect_argsTupleScheme();
      }
    }

    private static class mySQLConnect_argsTupleScheme extends TupleScheme<mySQLConnect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mySQLConnect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer()) {
          optionals.set(0);
        }
        if (struct.isSetDatabase()) {
          optionals.set(1);
        }
        if (struct.isSetUserName()) {
          optionals.set(2);
        }
        if (struct.isSetUserpw()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServer()) {
          oprot.writeString(struct.server);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetUserpw()) {
          oprot.writeString(struct.userpw);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mySQLConnect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.server = iprot.readString();
          struct.setServerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userpw = iprot.readString();
          struct.setUserpwIsSet(true);
        }
      }
    }

  }

  public static class mySQLConnect_result implements org.apache.thrift.TBase<mySQLConnect_result, mySQLConnect_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mySQLConnect_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mySQLConnect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mySQLConnect_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mySQLConnect_result.class, metaDataMap);
    }

    public mySQLConnect_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mySQLConnect_result(mySQLConnect_result other) {
    }

    public mySQLConnect_result deepCopy() {
      return new mySQLConnect_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mySQLConnect_result)
        return this.equals((mySQLConnect_result)that);
      return false;
    }

    public boolean equals(mySQLConnect_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mySQLConnect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mySQLConnect_result typedOther = (mySQLConnect_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mySQLConnect_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mySQLConnect_resultStandardSchemeFactory implements SchemeFactory {
      public mySQLConnect_resultStandardScheme getScheme() {
        return new mySQLConnect_resultStandardScheme();
      }
    }

    private static class mySQLConnect_resultStandardScheme extends StandardScheme<mySQLConnect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mySQLConnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mySQLConnect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mySQLConnect_resultTupleSchemeFactory implements SchemeFactory {
      public mySQLConnect_resultTupleScheme getScheme() {
        return new mySQLConnect_resultTupleScheme();
      }
    }

    private static class mySQLConnect_resultTupleScheme extends TupleScheme<mySQLConnect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mySQLConnect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mySQLConnect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class taSreeningXMLParser_args implements org.apache.thrift.TBase<taSreeningXMLParser_args, taSreeningXMLParser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("taSreeningXMLParser_args");

    private static final org.apache.thrift.protocol.TField SCRNLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("SCRNList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TASCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("TAScore", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INTENSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("intensity", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MASS_DEV_FIELD_DESC = new org.apache.thrift.protocol.TField("massDev", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField M_SIGMA_FIELD_DESC = new org.apache.thrift.protocol.TField("mSigma", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new taSreeningXMLParser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new taSreeningXMLParser_argsTupleSchemeFactory());
    }

    public List<String> SCRNList; // required
    public String TAScore; // required
    public String area; // required
    public String intensity; // required
    public String massDev; // required
    public String mSigma; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCRNLIST((short)1, "SCRNList"),
      TASCORE((short)2, "TAScore"),
      AREA((short)3, "area"),
      INTENSITY((short)4, "intensity"),
      MASS_DEV((short)5, "massDev"),
      M_SIGMA((short)6, "mSigma");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCRNLIST
            return SCRNLIST;
          case 2: // TASCORE
            return TASCORE;
          case 3: // AREA
            return AREA;
          case 4: // INTENSITY
            return INTENSITY;
          case 5: // MASS_DEV
            return MASS_DEV;
          case 6: // M_SIGMA
            return M_SIGMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCRNLIST, new org.apache.thrift.meta_data.FieldMetaData("SCRNList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TASCORE, new org.apache.thrift.meta_data.FieldMetaData("TAScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTENSITY, new org.apache.thrift.meta_data.FieldMetaData("intensity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MASS_DEV, new org.apache.thrift.meta_data.FieldMetaData("massDev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.M_SIGMA, new org.apache.thrift.meta_data.FieldMetaData("mSigma", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(taSreeningXMLParser_args.class, metaDataMap);
    }

    public taSreeningXMLParser_args() {
    }

    public taSreeningXMLParser_args(
      List<String> SCRNList,
      String TAScore,
      String area,
      String intensity,
      String massDev,
      String mSigma)
    {
      this();
      this.SCRNList = SCRNList;
      this.TAScore = TAScore;
      this.area = area;
      this.intensity = intensity;
      this.massDev = massDev;
      this.mSigma = mSigma;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public taSreeningXMLParser_args(taSreeningXMLParser_args other) {
      if (other.isSetSCRNList()) {
        List<String> __this__SCRNList = new ArrayList<String>();
        for (String other_element : other.SCRNList) {
          __this__SCRNList.add(other_element);
        }
        this.SCRNList = __this__SCRNList;
      }
      if (other.isSetTAScore()) {
        this.TAScore = other.TAScore;
      }
      if (other.isSetArea()) {
        this.area = other.area;
      }
      if (other.isSetIntensity()) {
        this.intensity = other.intensity;
      }
      if (other.isSetMassDev()) {
        this.massDev = other.massDev;
      }
      if (other.isSetMSigma()) {
        this.mSigma = other.mSigma;
      }
    }

    public taSreeningXMLParser_args deepCopy() {
      return new taSreeningXMLParser_args(this);
    }

    @Override
    public void clear() {
      this.SCRNList = null;
      this.TAScore = null;
      this.area = null;
      this.intensity = null;
      this.massDev = null;
      this.mSigma = null;
    }

    public int getSCRNListSize() {
      return (this.SCRNList == null) ? 0 : this.SCRNList.size();
    }

    public java.util.Iterator<String> getSCRNListIterator() {
      return (this.SCRNList == null) ? null : this.SCRNList.iterator();
    }

    public void addToSCRNList(String elem) {
      if (this.SCRNList == null) {
        this.SCRNList = new ArrayList<String>();
      }
      this.SCRNList.add(elem);
    }

    public List<String> getSCRNList() {
      return this.SCRNList;
    }

    public taSreeningXMLParser_args setSCRNList(List<String> SCRNList) {
      this.SCRNList = SCRNList;
      return this;
    }

    public void unsetSCRNList() {
      this.SCRNList = null;
    }

    /** Returns true if field SCRNList is set (has been assigned a value) and false otherwise */
    public boolean isSetSCRNList() {
      return this.SCRNList != null;
    }

    public void setSCRNListIsSet(boolean value) {
      if (!value) {
        this.SCRNList = null;
      }
    }

    public String getTAScore() {
      return this.TAScore;
    }

    public taSreeningXMLParser_args setTAScore(String TAScore) {
      this.TAScore = TAScore;
      return this;
    }

    public void unsetTAScore() {
      this.TAScore = null;
    }

    /** Returns true if field TAScore is set (has been assigned a value) and false otherwise */
    public boolean isSetTAScore() {
      return this.TAScore != null;
    }

    public void setTAScoreIsSet(boolean value) {
      if (!value) {
        this.TAScore = null;
      }
    }

    public String getArea() {
      return this.area;
    }

    public taSreeningXMLParser_args setArea(String area) {
      this.area = area;
      return this;
    }

    public void unsetArea() {
      this.area = null;
    }

    /** Returns true if field area is set (has been assigned a value) and false otherwise */
    public boolean isSetArea() {
      return this.area != null;
    }

    public void setAreaIsSet(boolean value) {
      if (!value) {
        this.area = null;
      }
    }

    public String getIntensity() {
      return this.intensity;
    }

    public taSreeningXMLParser_args setIntensity(String intensity) {
      this.intensity = intensity;
      return this;
    }

    public void unsetIntensity() {
      this.intensity = null;
    }

    /** Returns true if field intensity is set (has been assigned a value) and false otherwise */
    public boolean isSetIntensity() {
      return this.intensity != null;
    }

    public void setIntensityIsSet(boolean value) {
      if (!value) {
        this.intensity = null;
      }
    }

    public String getMassDev() {
      return this.massDev;
    }

    public taSreeningXMLParser_args setMassDev(String massDev) {
      this.massDev = massDev;
      return this;
    }

    public void unsetMassDev() {
      this.massDev = null;
    }

    /** Returns true if field massDev is set (has been assigned a value) and false otherwise */
    public boolean isSetMassDev() {
      return this.massDev != null;
    }

    public void setMassDevIsSet(boolean value) {
      if (!value) {
        this.massDev = null;
      }
    }

    public String getMSigma() {
      return this.mSigma;
    }

    public taSreeningXMLParser_args setMSigma(String mSigma) {
      this.mSigma = mSigma;
      return this;
    }

    public void unsetMSigma() {
      this.mSigma = null;
    }

    /** Returns true if field mSigma is set (has been assigned a value) and false otherwise */
    public boolean isSetMSigma() {
      return this.mSigma != null;
    }

    public void setMSigmaIsSet(boolean value) {
      if (!value) {
        this.mSigma = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCRNLIST:
        if (value == null) {
          unsetSCRNList();
        } else {
          setSCRNList((List<String>)value);
        }
        break;

      case TASCORE:
        if (value == null) {
          unsetTAScore();
        } else {
          setTAScore((String)value);
        }
        break;

      case AREA:
        if (value == null) {
          unsetArea();
        } else {
          setArea((String)value);
        }
        break;

      case INTENSITY:
        if (value == null) {
          unsetIntensity();
        } else {
          setIntensity((String)value);
        }
        break;

      case MASS_DEV:
        if (value == null) {
          unsetMassDev();
        } else {
          setMassDev((String)value);
        }
        break;

      case M_SIGMA:
        if (value == null) {
          unsetMSigma();
        } else {
          setMSigma((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCRNLIST:
        return getSCRNList();

      case TASCORE:
        return getTAScore();

      case AREA:
        return getArea();

      case INTENSITY:
        return getIntensity();

      case MASS_DEV:
        return getMassDev();

      case M_SIGMA:
        return getMSigma();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCRNLIST:
        return isSetSCRNList();
      case TASCORE:
        return isSetTAScore();
      case AREA:
        return isSetArea();
      case INTENSITY:
        return isSetIntensity();
      case MASS_DEV:
        return isSetMassDev();
      case M_SIGMA:
        return isSetMSigma();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof taSreeningXMLParser_args)
        return this.equals((taSreeningXMLParser_args)that);
      return false;
    }

    public boolean equals(taSreeningXMLParser_args that) {
      if (that == null)
        return false;

      boolean this_present_SCRNList = true && this.isSetSCRNList();
      boolean that_present_SCRNList = true && that.isSetSCRNList();
      if (this_present_SCRNList || that_present_SCRNList) {
        if (!(this_present_SCRNList && that_present_SCRNList))
          return false;
        if (!this.SCRNList.equals(that.SCRNList))
          return false;
      }

      boolean this_present_TAScore = true && this.isSetTAScore();
      boolean that_present_TAScore = true && that.isSetTAScore();
      if (this_present_TAScore || that_present_TAScore) {
        if (!(this_present_TAScore && that_present_TAScore))
          return false;
        if (!this.TAScore.equals(that.TAScore))
          return false;
      }

      boolean this_present_area = true && this.isSetArea();
      boolean that_present_area = true && that.isSetArea();
      if (this_present_area || that_present_area) {
        if (!(this_present_area && that_present_area))
          return false;
        if (!this.area.equals(that.area))
          return false;
      }

      boolean this_present_intensity = true && this.isSetIntensity();
      boolean that_present_intensity = true && that.isSetIntensity();
      if (this_present_intensity || that_present_intensity) {
        if (!(this_present_intensity && that_present_intensity))
          return false;
        if (!this.intensity.equals(that.intensity))
          return false;
      }

      boolean this_present_massDev = true && this.isSetMassDev();
      boolean that_present_massDev = true && that.isSetMassDev();
      if (this_present_massDev || that_present_massDev) {
        if (!(this_present_massDev && that_present_massDev))
          return false;
        if (!this.massDev.equals(that.massDev))
          return false;
      }

      boolean this_present_mSigma = true && this.isSetMSigma();
      boolean that_present_mSigma = true && that.isSetMSigma();
      if (this_present_mSigma || that_present_mSigma) {
        if (!(this_present_mSigma && that_present_mSigma))
          return false;
        if (!this.mSigma.equals(that.mSigma))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(taSreeningXMLParser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      taSreeningXMLParser_args typedOther = (taSreeningXMLParser_args)other;

      lastComparison = Boolean.valueOf(isSetSCRNList()).compareTo(typedOther.isSetSCRNList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSCRNList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SCRNList, typedOther.SCRNList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTAScore()).compareTo(typedOther.isSetTAScore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTAScore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TAScore, typedOther.TAScore);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArea()).compareTo(typedOther.isSetArea());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArea()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, typedOther.area);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIntensity()).compareTo(typedOther.isSetIntensity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntensity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intensity, typedOther.intensity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMassDev()).compareTo(typedOther.isSetMassDev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMassDev()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.massDev, typedOther.massDev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMSigma()).compareTo(typedOther.isSetMSigma());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMSigma()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSigma, typedOther.mSigma);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("taSreeningXMLParser_args(");
      boolean first = true;

      sb.append("SCRNList:");
      if (this.SCRNList == null) {
        sb.append("null");
      } else {
        sb.append(this.SCRNList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("TAScore:");
      if (this.TAScore == null) {
        sb.append("null");
      } else {
        sb.append(this.TAScore);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("intensity:");
      if (this.intensity == null) {
        sb.append("null");
      } else {
        sb.append(this.intensity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("massDev:");
      if (this.massDev == null) {
        sb.append("null");
      } else {
        sb.append(this.massDev);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mSigma:");
      if (this.mSigma == null) {
        sb.append("null");
      } else {
        sb.append(this.mSigma);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class taSreeningXMLParser_argsStandardSchemeFactory implements SchemeFactory {
      public taSreeningXMLParser_argsStandardScheme getScheme() {
        return new taSreeningXMLParser_argsStandardScheme();
      }
    }

    private static class taSreeningXMLParser_argsStandardScheme extends StandardScheme<taSreeningXMLParser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, taSreeningXMLParser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCRNLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.SCRNList = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.SCRNList.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSCRNListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASCORE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.TAScore = iprot.readString();
                struct.setTAScoreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AREA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.area = iprot.readString();
                struct.setAreaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INTENSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.intensity = iprot.readString();
                struct.setIntensityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MASS_DEV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.massDev = iprot.readString();
                struct.setMassDevIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // M_SIGMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mSigma = iprot.readString();
                struct.setMSigmaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, taSreeningXMLParser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.SCRNList != null) {
          oprot.writeFieldBegin(SCRNLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.SCRNList.size()));
            for (String _iter19 : struct.SCRNList)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.TAScore != null) {
          oprot.writeFieldBegin(TASCORE_FIELD_DESC);
          oprot.writeString(struct.TAScore);
          oprot.writeFieldEnd();
        }
        if (struct.area != null) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
        if (struct.intensity != null) {
          oprot.writeFieldBegin(INTENSITY_FIELD_DESC);
          oprot.writeString(struct.intensity);
          oprot.writeFieldEnd();
        }
        if (struct.massDev != null) {
          oprot.writeFieldBegin(MASS_DEV_FIELD_DESC);
          oprot.writeString(struct.massDev);
          oprot.writeFieldEnd();
        }
        if (struct.mSigma != null) {
          oprot.writeFieldBegin(M_SIGMA_FIELD_DESC);
          oprot.writeString(struct.mSigma);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class taSreeningXMLParser_argsTupleSchemeFactory implements SchemeFactory {
      public taSreeningXMLParser_argsTupleScheme getScheme() {
        return new taSreeningXMLParser_argsTupleScheme();
      }
    }

    private static class taSreeningXMLParser_argsTupleScheme extends TupleScheme<taSreeningXMLParser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, taSreeningXMLParser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSCRNList()) {
          optionals.set(0);
        }
        if (struct.isSetTAScore()) {
          optionals.set(1);
        }
        if (struct.isSetArea()) {
          optionals.set(2);
        }
        if (struct.isSetIntensity()) {
          optionals.set(3);
        }
        if (struct.isSetMassDev()) {
          optionals.set(4);
        }
        if (struct.isSetMSigma()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSCRNList()) {
          {
            oprot.writeI32(struct.SCRNList.size());
            for (String _iter20 : struct.SCRNList)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetTAScore()) {
          oprot.writeString(struct.TAScore);
        }
        if (struct.isSetArea()) {
          oprot.writeString(struct.area);
        }
        if (struct.isSetIntensity()) {
          oprot.writeString(struct.intensity);
        }
        if (struct.isSetMassDev()) {
          oprot.writeString(struct.massDev);
        }
        if (struct.isSetMSigma()) {
          oprot.writeString(struct.mSigma);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, taSreeningXMLParser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.SCRNList = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.SCRNList.add(_elem23);
            }
          }
          struct.setSCRNListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.TAScore = iprot.readString();
          struct.setTAScoreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.area = iprot.readString();
          struct.setAreaIsSet(true);
        }
        if (incoming.get(3)) {
          struct.intensity = iprot.readString();
          struct.setIntensityIsSet(true);
        }
        if (incoming.get(4)) {
          struct.massDev = iprot.readString();
          struct.setMassDevIsSet(true);
        }
        if (incoming.get(5)) {
          struct.mSigma = iprot.readString();
          struct.setMSigmaIsSet(true);
        }
      }
    }

  }

  public static class taSreeningXMLParser_result implements org.apache.thrift.TBase<taSreeningXMLParser_result, taSreeningXMLParser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("taSreeningXMLParser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new taSreeningXMLParser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new taSreeningXMLParser_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(taSreeningXMLParser_result.class, metaDataMap);
    }

    public taSreeningXMLParser_result() {
    }

    public taSreeningXMLParser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public taSreeningXMLParser_result(taSreeningXMLParser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public taSreeningXMLParser_result deepCopy() {
      return new taSreeningXMLParser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public taSreeningXMLParser_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof taSreeningXMLParser_result)
        return this.equals((taSreeningXMLParser_result)that);
      return false;
    }

    public boolean equals(taSreeningXMLParser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(taSreeningXMLParser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      taSreeningXMLParser_result typedOther = (taSreeningXMLParser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("taSreeningXMLParser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class taSreeningXMLParser_resultStandardSchemeFactory implements SchemeFactory {
      public taSreeningXMLParser_resultStandardScheme getScheme() {
        return new taSreeningXMLParser_resultStandardScheme();
      }
    }

    private static class taSreeningXMLParser_resultStandardScheme extends StandardScheme<taSreeningXMLParser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, taSreeningXMLParser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, taSreeningXMLParser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class taSreeningXMLParser_resultTupleSchemeFactory implements SchemeFactory {
      public taSreeningXMLParser_resultTupleScheme getScheme() {
        return new taSreeningXMLParser_resultTupleScheme();
      }
    }

    private static class taSreeningXMLParser_resultTupleScheme extends TupleScheme<taSreeningXMLParser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, taSreeningXMLParser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, taSreeningXMLParser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ipc_args implements org.apache.thrift.TBase<ipc_args, ipc_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ipc_args");

    private static final org.apache.thrift.protocol.TField ION_FORMULA_FIELD_DESC = new org.apache.thrift.protocol.TField("ionFormula", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ION_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ionCharge", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ipc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ipc_argsTupleSchemeFactory());
    }

    public String ionFormula; // required
    public String ionCharge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ION_FORMULA((short)1, "ionFormula"),
      ION_CHARGE((short)2, "ionCharge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ION_FORMULA
            return ION_FORMULA;
          case 2: // ION_CHARGE
            return ION_CHARGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ION_FORMULA, new org.apache.thrift.meta_data.FieldMetaData("ionFormula", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ION_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("ionCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ipc_args.class, metaDataMap);
    }

    public ipc_args() {
    }

    public ipc_args(
      String ionFormula,
      String ionCharge)
    {
      this();
      this.ionFormula = ionFormula;
      this.ionCharge = ionCharge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ipc_args(ipc_args other) {
      if (other.isSetIonFormula()) {
        this.ionFormula = other.ionFormula;
      }
      if (other.isSetIonCharge()) {
        this.ionCharge = other.ionCharge;
      }
    }

    public ipc_args deepCopy() {
      return new ipc_args(this);
    }

    @Override
    public void clear() {
      this.ionFormula = null;
      this.ionCharge = null;
    }

    public String getIonFormula() {
      return this.ionFormula;
    }

    public ipc_args setIonFormula(String ionFormula) {
      this.ionFormula = ionFormula;
      return this;
    }

    public void unsetIonFormula() {
      this.ionFormula = null;
    }

    /** Returns true if field ionFormula is set (has been assigned a value) and false otherwise */
    public boolean isSetIonFormula() {
      return this.ionFormula != null;
    }

    public void setIonFormulaIsSet(boolean value) {
      if (!value) {
        this.ionFormula = null;
      }
    }

    public String getIonCharge() {
      return this.ionCharge;
    }

    public ipc_args setIonCharge(String ionCharge) {
      this.ionCharge = ionCharge;
      return this;
    }

    public void unsetIonCharge() {
      this.ionCharge = null;
    }

    /** Returns true if field ionCharge is set (has been assigned a value) and false otherwise */
    public boolean isSetIonCharge() {
      return this.ionCharge != null;
    }

    public void setIonChargeIsSet(boolean value) {
      if (!value) {
        this.ionCharge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ION_FORMULA:
        if (value == null) {
          unsetIonFormula();
        } else {
          setIonFormula((String)value);
        }
        break;

      case ION_CHARGE:
        if (value == null) {
          unsetIonCharge();
        } else {
          setIonCharge((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ION_FORMULA:
        return getIonFormula();

      case ION_CHARGE:
        return getIonCharge();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ION_FORMULA:
        return isSetIonFormula();
      case ION_CHARGE:
        return isSetIonCharge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ipc_args)
        return this.equals((ipc_args)that);
      return false;
    }

    public boolean equals(ipc_args that) {
      if (that == null)
        return false;

      boolean this_present_ionFormula = true && this.isSetIonFormula();
      boolean that_present_ionFormula = true && that.isSetIonFormula();
      if (this_present_ionFormula || that_present_ionFormula) {
        if (!(this_present_ionFormula && that_present_ionFormula))
          return false;
        if (!this.ionFormula.equals(that.ionFormula))
          return false;
      }

      boolean this_present_ionCharge = true && this.isSetIonCharge();
      boolean that_present_ionCharge = true && that.isSetIonCharge();
      if (this_present_ionCharge || that_present_ionCharge) {
        if (!(this_present_ionCharge && that_present_ionCharge))
          return false;
        if (!this.ionCharge.equals(that.ionCharge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ipc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ipc_args typedOther = (ipc_args)other;

      lastComparison = Boolean.valueOf(isSetIonFormula()).compareTo(typedOther.isSetIonFormula());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIonFormula()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ionFormula, typedOther.ionFormula);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIonCharge()).compareTo(typedOther.isSetIonCharge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIonCharge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ionCharge, typedOther.ionCharge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ipc_args(");
      boolean first = true;

      sb.append("ionFormula:");
      if (this.ionFormula == null) {
        sb.append("null");
      } else {
        sb.append(this.ionFormula);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ionCharge:");
      if (this.ionCharge == null) {
        sb.append("null");
      } else {
        sb.append(this.ionCharge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ipc_argsStandardSchemeFactory implements SchemeFactory {
      public ipc_argsStandardScheme getScheme() {
        return new ipc_argsStandardScheme();
      }
    }

    private static class ipc_argsStandardScheme extends StandardScheme<ipc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ipc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ION_FORMULA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ionFormula = iprot.readString();
                struct.setIonFormulaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ION_CHARGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ionCharge = iprot.readString();
                struct.setIonChargeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ipc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ionFormula != null) {
          oprot.writeFieldBegin(ION_FORMULA_FIELD_DESC);
          oprot.writeString(struct.ionFormula);
          oprot.writeFieldEnd();
        }
        if (struct.ionCharge != null) {
          oprot.writeFieldBegin(ION_CHARGE_FIELD_DESC);
          oprot.writeString(struct.ionCharge);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ipc_argsTupleSchemeFactory implements SchemeFactory {
      public ipc_argsTupleScheme getScheme() {
        return new ipc_argsTupleScheme();
      }
    }

    private static class ipc_argsTupleScheme extends TupleScheme<ipc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ipc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIonFormula()) {
          optionals.set(0);
        }
        if (struct.isSetIonCharge()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIonFormula()) {
          oprot.writeString(struct.ionFormula);
        }
        if (struct.isSetIonCharge()) {
          oprot.writeString(struct.ionCharge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ipc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ionFormula = iprot.readString();
          struct.setIonFormulaIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ionCharge = iprot.readString();
          struct.setIonChargeIsSet(true);
        }
      }
    }

  }

  public static class ipc_result implements org.apache.thrift.TBase<ipc_result, ipc_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ipc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ipc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ipc_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ipc_result.class, metaDataMap);
    }

    public ipc_result() {
    }

    public ipc_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ipc_result(ipc_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public ipc_result deepCopy() {
      return new ipc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public ipc_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ipc_result)
        return this.equals((ipc_result)that);
      return false;
    }

    public boolean equals(ipc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ipc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ipc_result typedOther = (ipc_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ipc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ipc_resultStandardSchemeFactory implements SchemeFactory {
      public ipc_resultStandardScheme getScheme() {
        return new ipc_resultStandardScheme();
      }
    }

    private static class ipc_resultStandardScheme extends StandardScheme<ipc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ipc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    String _elem26; // required
                    _elem26 = iprot.readString();
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ipc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ipc_resultTupleSchemeFactory implements SchemeFactory {
      public ipc_resultTupleScheme getScheme() {
        return new ipc_resultTupleScheme();
      }
    }

    private static class ipc_resultTupleScheme extends TupleScheme<ipc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ipc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ipc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              String _elem31; // required
              _elem31 = iprot.readString();
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class metabolomeMiningXMLParser_args implements org.apache.thrift.TBase<metabolomeMiningXMLParser_args, metabolomeMiningXMLParser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("metabolomeMiningXMLParser_args");

    private static final org.apache.thrift.protocol.TField METALIST_FIELD_DESC = new org.apache.thrift.protocol.TField("METAList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField INTENSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("intensity", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PEAKS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("peaksNo", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField RET_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("retTime", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField RECALCULATE_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("recalculateCharge", org.apache.thrift.protocol.TType.BOOL, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new metabolomeMiningXMLParser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new metabolomeMiningXMLParser_argsTupleSchemeFactory());
    }

    public List<String> METAList; // required
    public String intensity; // required
    public String area; // required
    public String peaksNo; // required
    public String retTime; // required
    public boolean recalculateCharge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METALIST((short)1, "METAList"),
      INTENSITY((short)2, "intensity"),
      AREA((short)3, "area"),
      PEAKS_NO((short)4, "peaksNo"),
      RET_TIME((short)5, "retTime"),
      RECALCULATE_CHARGE((short)6, "recalculateCharge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METALIST
            return METALIST;
          case 2: // INTENSITY
            return INTENSITY;
          case 3: // AREA
            return AREA;
          case 4: // PEAKS_NO
            return PEAKS_NO;
          case 5: // RET_TIME
            return RET_TIME;
          case 6: // RECALCULATE_CHARGE
            return RECALCULATE_CHARGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECALCULATECHARGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METALIST, new org.apache.thrift.meta_data.FieldMetaData("METAList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.INTENSITY, new org.apache.thrift.meta_data.FieldMetaData("intensity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PEAKS_NO, new org.apache.thrift.meta_data.FieldMetaData("peaksNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RET_TIME, new org.apache.thrift.meta_data.FieldMetaData("retTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECALCULATE_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("recalculateCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(metabolomeMiningXMLParser_args.class, metaDataMap);
    }

    public metabolomeMiningXMLParser_args() {
    }

    public metabolomeMiningXMLParser_args(
      List<String> METAList,
      String intensity,
      String area,
      String peaksNo,
      String retTime,
      boolean recalculateCharge)
    {
      this();
      this.METAList = METAList;
      this.intensity = intensity;
      this.area = area;
      this.peaksNo = peaksNo;
      this.retTime = retTime;
      this.recalculateCharge = recalculateCharge;
      setRecalculateChargeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public metabolomeMiningXMLParser_args(metabolomeMiningXMLParser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMETAList()) {
        List<String> __this__METAList = new ArrayList<String>();
        for (String other_element : other.METAList) {
          __this__METAList.add(other_element);
        }
        this.METAList = __this__METAList;
      }
      if (other.isSetIntensity()) {
        this.intensity = other.intensity;
      }
      if (other.isSetArea()) {
        this.area = other.area;
      }
      if (other.isSetPeaksNo()) {
        this.peaksNo = other.peaksNo;
      }
      if (other.isSetRetTime()) {
        this.retTime = other.retTime;
      }
      this.recalculateCharge = other.recalculateCharge;
    }

    public metabolomeMiningXMLParser_args deepCopy() {
      return new metabolomeMiningXMLParser_args(this);
    }

    @Override
    public void clear() {
      this.METAList = null;
      this.intensity = null;
      this.area = null;
      this.peaksNo = null;
      this.retTime = null;
      setRecalculateChargeIsSet(false);
      this.recalculateCharge = false;
    }

    public int getMETAListSize() {
      return (this.METAList == null) ? 0 : this.METAList.size();
    }

    public java.util.Iterator<String> getMETAListIterator() {
      return (this.METAList == null) ? null : this.METAList.iterator();
    }

    public void addToMETAList(String elem) {
      if (this.METAList == null) {
        this.METAList = new ArrayList<String>();
      }
      this.METAList.add(elem);
    }

    public List<String> getMETAList() {
      return this.METAList;
    }

    public metabolomeMiningXMLParser_args setMETAList(List<String> METAList) {
      this.METAList = METAList;
      return this;
    }

    public void unsetMETAList() {
      this.METAList = null;
    }

    /** Returns true if field METAList is set (has been assigned a value) and false otherwise */
    public boolean isSetMETAList() {
      return this.METAList != null;
    }

    public void setMETAListIsSet(boolean value) {
      if (!value) {
        this.METAList = null;
      }
    }

    public String getIntensity() {
      return this.intensity;
    }

    public metabolomeMiningXMLParser_args setIntensity(String intensity) {
      this.intensity = intensity;
      return this;
    }

    public void unsetIntensity() {
      this.intensity = null;
    }

    /** Returns true if field intensity is set (has been assigned a value) and false otherwise */
    public boolean isSetIntensity() {
      return this.intensity != null;
    }

    public void setIntensityIsSet(boolean value) {
      if (!value) {
        this.intensity = null;
      }
    }

    public String getArea() {
      return this.area;
    }

    public metabolomeMiningXMLParser_args setArea(String area) {
      this.area = area;
      return this;
    }

    public void unsetArea() {
      this.area = null;
    }

    /** Returns true if field area is set (has been assigned a value) and false otherwise */
    public boolean isSetArea() {
      return this.area != null;
    }

    public void setAreaIsSet(boolean value) {
      if (!value) {
        this.area = null;
      }
    }

    public String getPeaksNo() {
      return this.peaksNo;
    }

    public metabolomeMiningXMLParser_args setPeaksNo(String peaksNo) {
      this.peaksNo = peaksNo;
      return this;
    }

    public void unsetPeaksNo() {
      this.peaksNo = null;
    }

    /** Returns true if field peaksNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPeaksNo() {
      return this.peaksNo != null;
    }

    public void setPeaksNoIsSet(boolean value) {
      if (!value) {
        this.peaksNo = null;
      }
    }

    public String getRetTime() {
      return this.retTime;
    }

    public metabolomeMiningXMLParser_args setRetTime(String retTime) {
      this.retTime = retTime;
      return this;
    }

    public void unsetRetTime() {
      this.retTime = null;
    }

    /** Returns true if field retTime is set (has been assigned a value) and false otherwise */
    public boolean isSetRetTime() {
      return this.retTime != null;
    }

    public void setRetTimeIsSet(boolean value) {
      if (!value) {
        this.retTime = null;
      }
    }

    public boolean isRecalculateCharge() {
      return this.recalculateCharge;
    }

    public metabolomeMiningXMLParser_args setRecalculateCharge(boolean recalculateCharge) {
      this.recalculateCharge = recalculateCharge;
      setRecalculateChargeIsSet(true);
      return this;
    }

    public void unsetRecalculateCharge() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECALCULATECHARGE_ISSET_ID);
    }

    /** Returns true if field recalculateCharge is set (has been assigned a value) and false otherwise */
    public boolean isSetRecalculateCharge() {
      return EncodingUtils.testBit(__isset_bitfield, __RECALCULATECHARGE_ISSET_ID);
    }

    public void setRecalculateChargeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECALCULATECHARGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case METALIST:
        if (value == null) {
          unsetMETAList();
        } else {
          setMETAList((List<String>)value);
        }
        break;

      case INTENSITY:
        if (value == null) {
          unsetIntensity();
        } else {
          setIntensity((String)value);
        }
        break;

      case AREA:
        if (value == null) {
          unsetArea();
        } else {
          setArea((String)value);
        }
        break;

      case PEAKS_NO:
        if (value == null) {
          unsetPeaksNo();
        } else {
          setPeaksNo((String)value);
        }
        break;

      case RET_TIME:
        if (value == null) {
          unsetRetTime();
        } else {
          setRetTime((String)value);
        }
        break;

      case RECALCULATE_CHARGE:
        if (value == null) {
          unsetRecalculateCharge();
        } else {
          setRecalculateCharge((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case METALIST:
        return getMETAList();

      case INTENSITY:
        return getIntensity();

      case AREA:
        return getArea();

      case PEAKS_NO:
        return getPeaksNo();

      case RET_TIME:
        return getRetTime();

      case RECALCULATE_CHARGE:
        return Boolean.valueOf(isRecalculateCharge());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case METALIST:
        return isSetMETAList();
      case INTENSITY:
        return isSetIntensity();
      case AREA:
        return isSetArea();
      case PEAKS_NO:
        return isSetPeaksNo();
      case RET_TIME:
        return isSetRetTime();
      case RECALCULATE_CHARGE:
        return isSetRecalculateCharge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof metabolomeMiningXMLParser_args)
        return this.equals((metabolomeMiningXMLParser_args)that);
      return false;
    }

    public boolean equals(metabolomeMiningXMLParser_args that) {
      if (that == null)
        return false;

      boolean this_present_METAList = true && this.isSetMETAList();
      boolean that_present_METAList = true && that.isSetMETAList();
      if (this_present_METAList || that_present_METAList) {
        if (!(this_present_METAList && that_present_METAList))
          return false;
        if (!this.METAList.equals(that.METAList))
          return false;
      }

      boolean this_present_intensity = true && this.isSetIntensity();
      boolean that_present_intensity = true && that.isSetIntensity();
      if (this_present_intensity || that_present_intensity) {
        if (!(this_present_intensity && that_present_intensity))
          return false;
        if (!this.intensity.equals(that.intensity))
          return false;
      }

      boolean this_present_area = true && this.isSetArea();
      boolean that_present_area = true && that.isSetArea();
      if (this_present_area || that_present_area) {
        if (!(this_present_area && that_present_area))
          return false;
        if (!this.area.equals(that.area))
          return false;
      }

      boolean this_present_peaksNo = true && this.isSetPeaksNo();
      boolean that_present_peaksNo = true && that.isSetPeaksNo();
      if (this_present_peaksNo || that_present_peaksNo) {
        if (!(this_present_peaksNo && that_present_peaksNo))
          return false;
        if (!this.peaksNo.equals(that.peaksNo))
          return false;
      }

      boolean this_present_retTime = true && this.isSetRetTime();
      boolean that_present_retTime = true && that.isSetRetTime();
      if (this_present_retTime || that_present_retTime) {
        if (!(this_present_retTime && that_present_retTime))
          return false;
        if (!this.retTime.equals(that.retTime))
          return false;
      }

      boolean this_present_recalculateCharge = true;
      boolean that_present_recalculateCharge = true;
      if (this_present_recalculateCharge || that_present_recalculateCharge) {
        if (!(this_present_recalculateCharge && that_present_recalculateCharge))
          return false;
        if (this.recalculateCharge != that.recalculateCharge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(metabolomeMiningXMLParser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      metabolomeMiningXMLParser_args typedOther = (metabolomeMiningXMLParser_args)other;

      lastComparison = Boolean.valueOf(isSetMETAList()).compareTo(typedOther.isSetMETAList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMETAList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.METAList, typedOther.METAList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIntensity()).compareTo(typedOther.isSetIntensity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntensity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intensity, typedOther.intensity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArea()).compareTo(typedOther.isSetArea());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArea()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, typedOther.area);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeaksNo()).compareTo(typedOther.isSetPeaksNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeaksNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peaksNo, typedOther.peaksNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRetTime()).compareTo(typedOther.isSetRetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retTime, typedOther.retTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecalculateCharge()).compareTo(typedOther.isSetRecalculateCharge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecalculateCharge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recalculateCharge, typedOther.recalculateCharge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("metabolomeMiningXMLParser_args(");
      boolean first = true;

      sb.append("METAList:");
      if (this.METAList == null) {
        sb.append("null");
      } else {
        sb.append(this.METAList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("intensity:");
      if (this.intensity == null) {
        sb.append("null");
      } else {
        sb.append(this.intensity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peaksNo:");
      if (this.peaksNo == null) {
        sb.append("null");
      } else {
        sb.append(this.peaksNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("retTime:");
      if (this.retTime == null) {
        sb.append("null");
      } else {
        sb.append(this.retTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recalculateCharge:");
      sb.append(this.recalculateCharge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class metabolomeMiningXMLParser_argsStandardSchemeFactory implements SchemeFactory {
      public metabolomeMiningXMLParser_argsStandardScheme getScheme() {
        return new metabolomeMiningXMLParser_argsStandardScheme();
      }
    }

    private static class metabolomeMiningXMLParser_argsStandardScheme extends StandardScheme<metabolomeMiningXMLParser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, metabolomeMiningXMLParser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METALIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.METAList = new ArrayList<String>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    String _elem34; // required
                    _elem34 = iprot.readString();
                    struct.METAList.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setMETAListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTENSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.intensity = iprot.readString();
                struct.setIntensityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AREA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.area = iprot.readString();
                struct.setAreaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PEAKS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.peaksNo = iprot.readString();
                struct.setPeaksNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RET_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.retTime = iprot.readString();
                struct.setRetTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // RECALCULATE_CHARGE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recalculateCharge = iprot.readBool();
                struct.setRecalculateChargeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, metabolomeMiningXMLParser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.METAList != null) {
          oprot.writeFieldBegin(METALIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.METAList.size()));
            for (String _iter35 : struct.METAList)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.intensity != null) {
          oprot.writeFieldBegin(INTENSITY_FIELD_DESC);
          oprot.writeString(struct.intensity);
          oprot.writeFieldEnd();
        }
        if (struct.area != null) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
        if (struct.peaksNo != null) {
          oprot.writeFieldBegin(PEAKS_NO_FIELD_DESC);
          oprot.writeString(struct.peaksNo);
          oprot.writeFieldEnd();
        }
        if (struct.retTime != null) {
          oprot.writeFieldBegin(RET_TIME_FIELD_DESC);
          oprot.writeString(struct.retTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECALCULATE_CHARGE_FIELD_DESC);
        oprot.writeBool(struct.recalculateCharge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class metabolomeMiningXMLParser_argsTupleSchemeFactory implements SchemeFactory {
      public metabolomeMiningXMLParser_argsTupleScheme getScheme() {
        return new metabolomeMiningXMLParser_argsTupleScheme();
      }
    }

    private static class metabolomeMiningXMLParser_argsTupleScheme extends TupleScheme<metabolomeMiningXMLParser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningXMLParser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMETAList()) {
          optionals.set(0);
        }
        if (struct.isSetIntensity()) {
          optionals.set(1);
        }
        if (struct.isSetArea()) {
          optionals.set(2);
        }
        if (struct.isSetPeaksNo()) {
          optionals.set(3);
        }
        if (struct.isSetRetTime()) {
          optionals.set(4);
        }
        if (struct.isSetRecalculateCharge()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetMETAList()) {
          {
            oprot.writeI32(struct.METAList.size());
            for (String _iter36 : struct.METAList)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetIntensity()) {
          oprot.writeString(struct.intensity);
        }
        if (struct.isSetArea()) {
          oprot.writeString(struct.area);
        }
        if (struct.isSetPeaksNo()) {
          oprot.writeString(struct.peaksNo);
        }
        if (struct.isSetRetTime()) {
          oprot.writeString(struct.retTime);
        }
        if (struct.isSetRecalculateCharge()) {
          oprot.writeBool(struct.recalculateCharge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningXMLParser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.METAList = new ArrayList<String>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              String _elem39; // required
              _elem39 = iprot.readString();
              struct.METAList.add(_elem39);
            }
          }
          struct.setMETAListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.intensity = iprot.readString();
          struct.setIntensityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.area = iprot.readString();
          struct.setAreaIsSet(true);
        }
        if (incoming.get(3)) {
          struct.peaksNo = iprot.readString();
          struct.setPeaksNoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.retTime = iprot.readString();
          struct.setRetTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.recalculateCharge = iprot.readBool();
          struct.setRecalculateChargeIsSet(true);
        }
      }
    }

  }

  public static class metabolomeMiningXMLParser_result implements org.apache.thrift.TBase<metabolomeMiningXMLParser_result, metabolomeMiningXMLParser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("metabolomeMiningXMLParser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new metabolomeMiningXMLParser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new metabolomeMiningXMLParser_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(metabolomeMiningXMLParser_result.class, metaDataMap);
    }

    public metabolomeMiningXMLParser_result() {
    }

    public metabolomeMiningXMLParser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public metabolomeMiningXMLParser_result(metabolomeMiningXMLParser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public metabolomeMiningXMLParser_result deepCopy() {
      return new metabolomeMiningXMLParser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public metabolomeMiningXMLParser_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof metabolomeMiningXMLParser_result)
        return this.equals((metabolomeMiningXMLParser_result)that);
      return false;
    }

    public boolean equals(metabolomeMiningXMLParser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(metabolomeMiningXMLParser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      metabolomeMiningXMLParser_result typedOther = (metabolomeMiningXMLParser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("metabolomeMiningXMLParser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class metabolomeMiningXMLParser_resultStandardSchemeFactory implements SchemeFactory {
      public metabolomeMiningXMLParser_resultStandardScheme getScheme() {
        return new metabolomeMiningXMLParser_resultStandardScheme();
      }
    }

    private static class metabolomeMiningXMLParser_resultStandardScheme extends StandardScheme<metabolomeMiningXMLParser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, metabolomeMiningXMLParser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, metabolomeMiningXMLParser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class metabolomeMiningXMLParser_resultTupleSchemeFactory implements SchemeFactory {
      public metabolomeMiningXMLParser_resultTupleScheme getScheme() {
        return new metabolomeMiningXMLParser_resultTupleScheme();
      }
    }

    private static class metabolomeMiningXMLParser_resultTupleScheme extends TupleScheme<metabolomeMiningXMLParser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningXMLParser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningXMLParser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class metabolomeMiningQuery_args implements org.apache.thrift.TBase<metabolomeMiningQuery_args, metabolomeMiningQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("metabolomeMiningQuery_args");

    private static final org.apache.thrift.protocol.TField QRY__IDLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("QRY_IDList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new metabolomeMiningQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new metabolomeMiningQuery_argsTupleSchemeFactory());
    }

    public List<String> QRY_IDList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QRY__IDLIST((short)1, "QRY_IDList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QRY__IDLIST
            return QRY__IDLIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QRY__IDLIST, new org.apache.thrift.meta_data.FieldMetaData("QRY_IDList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(metabolomeMiningQuery_args.class, metaDataMap);
    }

    public metabolomeMiningQuery_args() {
    }

    public metabolomeMiningQuery_args(
      List<String> QRY_IDList)
    {
      this();
      this.QRY_IDList = QRY_IDList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public metabolomeMiningQuery_args(metabolomeMiningQuery_args other) {
      if (other.isSetQRY_IDList()) {
        List<String> __this__QRY_IDList = new ArrayList<String>();
        for (String other_element : other.QRY_IDList) {
          __this__QRY_IDList.add(other_element);
        }
        this.QRY_IDList = __this__QRY_IDList;
      }
    }

    public metabolomeMiningQuery_args deepCopy() {
      return new metabolomeMiningQuery_args(this);
    }

    @Override
    public void clear() {
      this.QRY_IDList = null;
    }

    public int getQRY_IDListSize() {
      return (this.QRY_IDList == null) ? 0 : this.QRY_IDList.size();
    }

    public java.util.Iterator<String> getQRY_IDListIterator() {
      return (this.QRY_IDList == null) ? null : this.QRY_IDList.iterator();
    }

    public void addToQRY_IDList(String elem) {
      if (this.QRY_IDList == null) {
        this.QRY_IDList = new ArrayList<String>();
      }
      this.QRY_IDList.add(elem);
    }

    public List<String> getQRY_IDList() {
      return this.QRY_IDList;
    }

    public metabolomeMiningQuery_args setQRY_IDList(List<String> QRY_IDList) {
      this.QRY_IDList = QRY_IDList;
      return this;
    }

    public void unsetQRY_IDList() {
      this.QRY_IDList = null;
    }

    /** Returns true if field QRY_IDList is set (has been assigned a value) and false otherwise */
    public boolean isSetQRY_IDList() {
      return this.QRY_IDList != null;
    }

    public void setQRY_IDListIsSet(boolean value) {
      if (!value) {
        this.QRY_IDList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QRY__IDLIST:
        if (value == null) {
          unsetQRY_IDList();
        } else {
          setQRY_IDList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QRY__IDLIST:
        return getQRY_IDList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QRY__IDLIST:
        return isSetQRY_IDList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof metabolomeMiningQuery_args)
        return this.equals((metabolomeMiningQuery_args)that);
      return false;
    }

    public boolean equals(metabolomeMiningQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_QRY_IDList = true && this.isSetQRY_IDList();
      boolean that_present_QRY_IDList = true && that.isSetQRY_IDList();
      if (this_present_QRY_IDList || that_present_QRY_IDList) {
        if (!(this_present_QRY_IDList && that_present_QRY_IDList))
          return false;
        if (!this.QRY_IDList.equals(that.QRY_IDList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(metabolomeMiningQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      metabolomeMiningQuery_args typedOther = (metabolomeMiningQuery_args)other;

      lastComparison = Boolean.valueOf(isSetQRY_IDList()).compareTo(typedOther.isSetQRY_IDList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQRY_IDList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.QRY_IDList, typedOther.QRY_IDList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("metabolomeMiningQuery_args(");
      boolean first = true;

      sb.append("QRY_IDList:");
      if (this.QRY_IDList == null) {
        sb.append("null");
      } else {
        sb.append(this.QRY_IDList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class metabolomeMiningQuery_argsStandardSchemeFactory implements SchemeFactory {
      public metabolomeMiningQuery_argsStandardScheme getScheme() {
        return new metabolomeMiningQuery_argsStandardScheme();
      }
    }

    private static class metabolomeMiningQuery_argsStandardScheme extends StandardScheme<metabolomeMiningQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, metabolomeMiningQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QRY__IDLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.QRY_IDList = new ArrayList<String>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    String _elem42; // required
                    _elem42 = iprot.readString();
                    struct.QRY_IDList.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setQRY_IDListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, metabolomeMiningQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.QRY_IDList != null) {
          oprot.writeFieldBegin(QRY__IDLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.QRY_IDList.size()));
            for (String _iter43 : struct.QRY_IDList)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class metabolomeMiningQuery_argsTupleSchemeFactory implements SchemeFactory {
      public metabolomeMiningQuery_argsTupleScheme getScheme() {
        return new metabolomeMiningQuery_argsTupleScheme();
      }
    }

    private static class metabolomeMiningQuery_argsTupleScheme extends TupleScheme<metabolomeMiningQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQRY_IDList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQRY_IDList()) {
          {
            oprot.writeI32(struct.QRY_IDList.size());
            for (String _iter44 : struct.QRY_IDList)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.QRY_IDList = new ArrayList<String>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              String _elem47; // required
              _elem47 = iprot.readString();
              struct.QRY_IDList.add(_elem47);
            }
          }
          struct.setQRY_IDListIsSet(true);
        }
      }
    }

  }

  public static class metabolomeMiningQuery_result implements org.apache.thrift.TBase<metabolomeMiningQuery_result, metabolomeMiningQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("metabolomeMiningQuery_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new metabolomeMiningQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new metabolomeMiningQuery_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(metabolomeMiningQuery_result.class, metaDataMap);
    }

    public metabolomeMiningQuery_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public metabolomeMiningQuery_result(metabolomeMiningQuery_result other) {
    }

    public metabolomeMiningQuery_result deepCopy() {
      return new metabolomeMiningQuery_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof metabolomeMiningQuery_result)
        return this.equals((metabolomeMiningQuery_result)that);
      return false;
    }

    public boolean equals(metabolomeMiningQuery_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(metabolomeMiningQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      metabolomeMiningQuery_result typedOther = (metabolomeMiningQuery_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("metabolomeMiningQuery_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class metabolomeMiningQuery_resultStandardSchemeFactory implements SchemeFactory {
      public metabolomeMiningQuery_resultStandardScheme getScheme() {
        return new metabolomeMiningQuery_resultStandardScheme();
      }
    }

    private static class metabolomeMiningQuery_resultStandardScheme extends StandardScheme<metabolomeMiningQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, metabolomeMiningQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, metabolomeMiningQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class metabolomeMiningQuery_resultTupleSchemeFactory implements SchemeFactory {
      public metabolomeMiningQuery_resultTupleScheme getScheme() {
        return new metabolomeMiningQuery_resultTupleScheme();
      }
    }

    private static class metabolomeMiningQuery_resultTupleScheme extends TupleScheme<metabolomeMiningQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, metabolomeMiningQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
